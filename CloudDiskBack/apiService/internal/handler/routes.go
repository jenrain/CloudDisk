// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	base "core/internal/handler/base"
	file "core/internal/handler/file"
	user "core/internal/handler/user"
	"core/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: base.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/code/send/register",
				Handler: base.MailCodeSendRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: base.UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/share/basic/detail",
				Handler: base.ShareBasicDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/detail",
					Handler: user.UserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user/name/update",
					Handler: user.UserNameUpdateHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/file/upload",
					Handler: file.FileUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/file/list",
					Handler: file.UserFileListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/detail/get",
					Handler: file.GetFileDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/folder/list",
					Handler: file.UserFolderListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/file/update",
					Handler: file.UserFileNameUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/folder/create",
					Handler: file.UserFolderCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/user/file/delete",
					Handler: file.UserFileDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user/file/move",
					Handler: file.UserFileMoveHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/parentid/get",
					Handler: file.GetCurrentParentIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/upload/prepare",
					Handler: file.FileUploadPrepareHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/upload/chunk",
					Handler: file.FileUploadChunkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/upload/chunk/complete",
					Handler: file.FileUploadChunkCompleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/path/get",
					Handler: file.GetFilePathHandler(serverCtx),
				},
			}...,
		),
	)
}
