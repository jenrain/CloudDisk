{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet isClickSelectAll = true;\nimport { getTypeIcon } from \"../plugins/utils.js\";\nimport Attribute from \"./Attribute.vue\";\nimport ImagePlayer from \"./ImagePlayer.vue\";\nimport RightClickMenu from \"./RightClickMenu.vue\";\nimport FolderDialog from \"./FolderDialog.vue\";\nimport GoTop from \"./GoTop.vue\";\nimport ShareDialog from \"./ShareDialog.vue\";\nimport MusicPlayer from \"./MusicPlayer.vue\";\nimport VideoPlayer from \"./VideoPlayer.vue\";\nimport App from \"@/App.vue\";\nexport default {\n  components: {\n    Attribute,\n    ImagePlayer,\n    RightClickMenu,\n    FolderDialog,\n    GoTop,\n    ShareDialog,\n    MusicPlayer,\n    VideoPlayer,\n    App\n  },\n  name: \"IconTypeList\",\n\n  data() {\n    return {\n      selectFiles: [],\n      isMenuShow: false,\n      menuTop: 0,\n      menuLeft: 0,\n      cardoffsetTop: 0,\n      cardoffsetLeft: 0,\n      // 重命名输入框\n      renameInput: \"\",\n      // 是否显示重命名输入框\n      isRenameShow: false,\n      // 右击的item\n      rightClickItem: {},\n      // 新建文件夹名称\n      createdName: \"\",\n      isCreateFolderShow: false,\n      // 是否显示图片diaload\n      isImgDialogShow: false,\n      //   当前要打开diaload的图片\n      currentImg: {},\n      // 当前目录的子目录\n      currentChildrenFolder: [],\n      //   是否显示文件右键菜单\n      isFolderMenuShow: false,\n      // 下载的文件信息\n      downloadFileInfo: {\n        url: \"\",\n        name: \"\"\n      },\n      // 视频列表\n      videoList: [],\n      // 是否显示属性框\n      isAttributeShow: false,\n      // 页面可见区域宽\n      pageWidth: document.body.clientWidth,\n      // 页面可见区域高\n      pageHeight: document.body.clientHeight,\n      // 属性dialog的位置\n      attributeTop: 0,\n      attributeLeft: 0,\n      // 是否禁止页面滚动\n      banScroll: false,\n      // 是否显示文件选择框\n      isFolderDialogShow: false,\n      // 当前文件是否已收藏\n      isCurrentFileCollected: false,\n      // 文件移动类型  'mult'和'current'\n      moveType: \"current\",\n      // 右键选中的文件夹item\n      rightClickFolderItem: {},\n      // 当前文件夹的id\n      currentFolderId: 0,\n      // 是否显示文件夹重命名输入框\n      isFolderRenameInputShow: false,\n      // 被拖动的itemList\n      dragItemList: [],\n      // 是否显示dragImgContainer\n      showDragImgContainer: false,\n      // dragImgContainer的位置\n      dragImgContainerPosition: {\n        x: 0,\n        y: 0\n      },\n      // 是否显示分享框\n      isShareDialogShow: false,\n      // 分享的文件\n      shareItem: {}\n    };\n  },\n\n  props: {\n    // type name\n    listData: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    },\n    folderList: {\n      type: Object,\n\n      default() {\n        return {};\n      }\n\n    },\n    // 右键菜单类型\n    rightClickMenuType: {\n      type: String,\n\n      default() {\n        return \"files\";\n      }\n\n    },\n    // item展示方式\n    showType: {\n      type: String,\n\n      default() {\n        return \"icon\";\n      }\n\n    },\n    searchFolder: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    }\n  },\n  methods: {\n    // 单击item的回调\n    selectCurrentItem(item) {\n      // 操作dom  直接操作dom可以减少循环，提高性能\n      // let listItem = document.querySelectorAll(\".listItem\");\n      // 先判断该选项是否已经被选中\n      let i = this.selectFiles.findIndex(item1 => item1.id == item.id);\n\n      if (i == -1) {\n        this.selectFiles.push(item);\n      } else {\n        this.selectFiles.splice(i, 1);\n      }\n    },\n\n    // 全选\n    // flag为boolean 全选或者取消全选\n    selectAll(flag) {\n      // let listItem = document.querySelectorAll(\".listItem\");\n      if (flag) {\n        this.selectFiles = this.listData.concat();\n      } else {\n        this.selectFiles = [];\n      }\n    },\n\n    // 右键单击item的事件\n    showMenu(e, item, type) {\n      // 如果属性框打开，则先关闭属性框\n      if (this.isAttributeShow == true) {\n        this.isAttributeShow = false;\n      }\n\n      this.banScroll = true;\n      console.log(e, item); // console.log(this.cardoffsetLeft);\n      // 获取菜单的高度\n\n      let menu = document.querySelector(\".RightClickMenu\");\n      let menuHeight = menu.offsetTop;\n      console.log([menu], menuHeight); // 计算菜单dialog 的位置\n      // files的菜单高度和collect不一样\n\n      if (this.rightClickMenuType == \"files\") {\n        this.menuTop = e.pageY + 250 > this.pageHeight ? this.pageHeight - 250 : e.pageY;\n      } else {\n        this.menuTop = e.pageY + 220 > this.pageHeight ? this.pageHeight - 220 : e.pageY;\n      }\n\n      this.menuLeft = e.pageX + 140 > this.pageWidth ? this.pageWidth - 140 : e.pageX; // 计算属性dialog的位置\n\n      this.attributeTop = e.pageY + 230 > this.pageHeight ? this.pageHeight - 230 : e.pageY;\n      this.attributeLeft = e.pageX + 340 > this.pageWidth ? this.pageWidth - 340 : e.pageX;\n\n      if (!type || type == \"menu\") {\n        // 判断右击文件是否已收藏\n        this.isCurrentFileCollected = item.collection == 1 ? true : false;\n        this.rightClickItem = item; // this.$store.commit(\"updateRightClickItem\", item);\n\n        this.isMenuShow = true;\n        this.isFolderMenuShow = false;\n      } else if (type == \"folderMenu\") {\n        this.isFolderMenuShow = true;\n        this.isMenuShow = false; // this.$store.commit(\"updateRightClickFolderItem\", item);\n\n        this.rightClickFolderItem = item;\n      }\n    },\n\n    // 点击重命名的回调\n    rename(type) {\n      // 获取点击重命名的索引\n      // this.rightClickItem = this.$store.state.rightClickItem;\n      if (!type) {\n        // 文件\n        this.isRenameShow = true;\n        this.renameInput = this.rightClickItem.name;\n      } else if (type == \"folder\") {\n        // 文件夹\n        this.isFolderRenameInputShow = true;\n        this.renameInput = this.rightClickFolderItem.name.slice(0, this.rightClickFolderItem.name.length - 1);\n      } //在input的属性中添加autofocus只能触发一次 这里改用操作DOM\n\n\n      this.$nextTick(() => {\n        if (this.$store.state.showType == \"icon\") {\n          document.querySelector(\".renameInput\").focus();\n        } else if (this.$store.state.showType == \"table\") {\n          document.querySelector(\".tableRenameInput\").focus();\n        }\n      }); //   console.log(this.rightClickIndex, 123456);\n    },\n\n    // 重命名完成后的回调  失去焦点或者回车\n    async renameDone(item, index, type) {\n      console.log(item); // 判断输入内容是否为空\n\n      if (this.renameInput.trim().length == 0) {\n        if (!type) {\n          this.$message.warning(\"文件名不能为空哦!\");\n          this.isRenameShow = false;\n        } else {\n          this.$message.warning(\"文件夹名称不能为空哦!\");\n          this.isFolderRenameInputShow = false;\n        }\n      } // 先判断rightClickIndex是否被重置为-1 被重置为-1说明已经调用过此函数（enter和blur会冲突，导致调用两次此函数）\n      // 已经在html中调用方法时判断了\n      // if (this.rightClickItem.id) {\n      // 判断名字是否改变\n      // 如果发生改变\n      // console.log(this.rightClickIndex);\n\n\n      console.log(\"文件类型：\", type);\n\n      if (!type) {\n        // 文件\n        console.log(\"原来的名字：\", this.rightClickItem.name);\n        console.log(\"新修改的名字：\", this.renameInput.trim());\n\n        if (this.rightClickItem.name != this.renameInput.trim()) {\n          this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\n          this.$axios({\n            url: \"/user/file/update\",\n            method: \"post\",\n            data: {\n              identity: item.identity,\n              name: this.renameInput.trim()\n            }\n          }).then(res => {\n            console.log(res.data);\n\n            if (res.data.success) {\n              this.searchFolder[index].name = this.renameInput.trim();\n            } else {\n              this.$message.error(\"重命名失败,请稍后重试!\");\n            }\n          });\n        }\n\n        this.rightClickItem = {};\n        this.isRenameShow = false;\n      } else {\n        // 文件夹\n        console.log(this.renameInput);\n\n        if (this.rightClickFolderItem.name != this.renameInput.trim()) {\n          this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\n          this.$axios({\n            url: \"/user/file/update\",\n            method: \"post\",\n            data: {\n              identity: item.identity,\n              name: this.renameInput.trim()\n            }\n          }).then(res => {\n            console.log(res.data);\n\n            if (res.data.success) {\n              this.listData[index].name = this.renameInput.trim();\n            } else {\n              this.$message.error(\"重命名失败,请稍后重试!\");\n            }\n          });\n        }\n\n        this.rightClickFolderItem = {};\n        this.isFolderRenameInputShow = false;\n      } // this.$store.commit(\"updateRightClickItem\", {});\n      // 清空renameInput\n\n\n      this.renameInput = \"\"; // }\n    },\n\n    // 新建文件夹命名完成的回调\n    createNameDone() {\n      // 避免 enter和 blur冲突调用两次此函数\n      this.$nextTick(async () => {\n        let input;\n\n        if (this.$store.state.showType == \"icon\") {\n          input = document.querySelector(\".createNameInput\");\n        } else if (this.$store.state.showType == \"table\") {\n          input = document.querySelector(\".tableCreateInput\");\n        }\n\n        if (input) {\n          if (this.createdName == \"\") {\n            this.$message.warning(\"文件夹名称不能为空哦!\");\n            this.$store.commit(\"updateIsCreateFolder\", false);\n          } else {\n            this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\n            this.$axios({\n              url: \"/user/folder/create\",\n              method: \"post\",\n              data: {\n                parent_id: this.$store.state.currentParentId,\n                name: this.createdName.trim()\n              }\n            }).then(res => {\n              console.log(res.data);\n\n              if (res.data.success) {\n                // this.$emit(\"getFolderList\");\n                // this.$store.commit(\"updateIsGetingFolder\", true);\n                this.$store.commit(\"updateIsGetingFolder\", false);\n              } else {\n                this.$message.error(res.data.msg); // this.createdName = \"\";\n                // this.$store.commit(\"updateIsCreateFolder\", false);\n              }\n            });\n          }\n        }\n      });\n    },\n\n    // 双击打开文件\n    openCurrentFile(item) {\n      // 先判断打开的文件类型\n      console.log(\"isVideoPlayerShow: \", this.$store.state.isVideoPlayerShow);\n      let filetype = item.filetype;\n      console.log(\"filetype: \", filetype);\n      console.log(\"item: \", item); // 打开的是video文件\n\n      if (filetype == \"video\") {\n        this.$store.commit(\"updateIsVideoPlayerShow\", true);\n        this.$store.commit(\"updateCurrentVideoInfo\", item);\n      } // 打开的是音频文件\n      else if (filetype == \"audio\") {\n        this.$store.commit(\"updateIsMusicPlayerShow\", true);\n        this.$store.commit(\"updateCurrentMusicInfo\", item);\n      } // 打开的是图片文件\n      else if (filetype == \"image\") {\n        this.currentImg = item;\n        this.isImgDialogShow = true;\n      } // 其它文件暂时无法直接打开 提醒暂时无法直接打开，可以下载后打开\n      else {\n        this.$message.warning(\"该文件暂时不能直接打开哦,可以下载后在本地打开!\");\n      }\n    },\n\n    // 删除文件\n    async deleteCurrentFile(type, item) {\n      let res;\n      let arr = [];\n\n      if (type == \"current\") {\n        arr.push(item.id);\n      } else if (type == \"mult\") {\n        this.selectFiles.forEach(item => {\n          arr.push(item.id);\n        });\n      }\n\n      console.log(\"identity: \", item.identity);\n      this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\n      this.$axios({\n        url: \"/user/file/delete\",\n        method: \"delete\",\n        data: {\n          identity: item.identity\n        }\n      }).then(res => {\n        console.log(res.data);\n\n        if (res.data.success) {\n          let index = this.listData.findIndex(item => item.id == this.rightClickItem.id);\n          this.listData.splice(index, 1); // 再判断一下被删除的item是否被多选了 如果被多选了，还需要再删除多选数组中的item\n\n          let idx = this.selectFiles.findIndex(item => item.id == this.rightClickItem.id);\n\n          if (idx != -1) {\n            this.selectFiles.splice(idx, 1);\n          }\n\n          this.$message.success(\"删除成功!\");\n        } else {\n          this.$message.error(\"删除失败,请稍后重试!\");\n        }\n      });\n    },\n\n    // js递归遍历树形json数据，根据关键字查找节点\n    //@leafId  查找的id，\n    //@nodes   原始Json数据\n    //@path    供递归使用\n    findPathByLeafId(leafId, nodes, path) {\n      if (path === undefined) {\n        path = [];\n      }\n\n      for (var i = 0; i < nodes.length; i++) {\n        var tmpPath = path.concat();\n        tmpPath.push(nodes[i].name);\n\n        if (leafId == nodes[i].name) {\n          return tmpPath;\n        }\n\n        if (nodes[i].childrenList) {\n          var findResult = this.findPathByLeafId(leafId, nodes[i].childrenList, tmpPath);\n\n          if (findResult) {\n            return findResult;\n          }\n        }\n      }\n    },\n\n    // 打开当前双击的文件夹\n    // 点击的是folderList中第 index个子目录\n    openCurrentFolder(item) {\n      this.$store.commit(\"updateLastParentId\", this.$store.state.currentParentId);\n      this.$store.commit(\"updateCurrentParentId\", item.id);\n      this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\n      this.$axios({\n        url: \"/user/file/list\",\n        method: \"post\",\n        data: {\n          id: this.$store.state.currentParentId\n        }\n      }).then(res => {\n        console.log(res.data);\n\n        if (res.data.success) {\n          // this.listData = res.data.files_list\n          // this.searchFolder = res.data.folder_list\n          this.$emit('update:listData', res.data.files_list);\n          this.$emit('update:searchFolder', res.data.folder_list);\n        } else {\n          this.$message.error(\"文件请求失败\");\n        }\n      });\n    },\n\n    // 判断当前所在的文件夹位置\n    getCurrentLocation() {\n      if (this.$route.params.path.search(\"search\") != -1) return;\n      console.log(612);\n      let currentFolder = this.$route.params.path;\n      currentFolder = currentFolder.slice(1, currentFolder.length);\n      let arr = currentFolder.split(\"/\");\n      console.log(arr); // 如果是/search就不计算当前位置了\n      // if (arr[arr.length - 1] == \"search\") {\n      //   return;\n      // }\n      // console.log(arr);\n\n      this.currentChildrenFolder = this.folderList.childrenList;\n      console.log(this.folderList);\n\n      if (arr.length > 1) {\n        // 说明不在根目录\n        for (var i = 1; i < arr.length; i++) {\n          let index = this.currentChildrenFolder.findIndex(item => item.name.substr(0, item.name.length - 1) == arr[i]);\n          this.currentFolderId = this.currentChildrenFolder[index].id;\n          this.currentChildrenFolder = this.currentChildrenFolder[index].childrenList; // console.log(482, this.currentChildrenFolder[index]);\n          // console.log(this.currentChildrenFolder);\n        } // console.log(\"currentFolderId\", this.currentFolderId);\n\n      } else {\n        // console.log(348, this.currentChildrenFolder);\n        this.currentFolderId = 1;\n      }\n    },\n\n    // 点击下载文件的回调\n    downloadCurrentFile(type, item) {\n      let url; // 循环的数组，里面的item是索引\n\n      let arr = [];\n\n      if (type == \"current\") {\n        arr.push(item);\n      } else if (type == \"mult\") {\n        arr = this.selectFiles;\n      }\n\n      arr.forEach(i => {\n        // 循环执行的速度太快，watch来不及监听 这里通过定时器放到异步执行\n        setTimeout(async () => {\n          if (i.filetype == \"video\" || i.filetype == \"audio\") {\n            console.log(\"i: \", i); // 请求url\n\n            let res = await this.$request(\"/eduoss/fileoss/getPlayAuth?isList=\" + i.videoId, \"\", \"post\");\n            console.log(res);\n            url = res.data.data.urlList[0].url;\n          } else {\n            url = \"/downloadfile/\" + i.url.split(\"com/\")[1];\n          }\n\n          this.$store.commit(\"updateCurrentDownloadFileInfo\", {\n            name: i.name + \".\" + i.type,\n            url\n          });\n        });\n      });\n    },\n\n    // 移动文件\n    async confirmMove(selectFolderId, currentFileId, list) {\n      // 把parentid传过来\n      console.log(\"selectFolderId: \", selectFolderId);\n      console.log(\"currentFileId: \", currentFileId); // 先判断是否是当前文件夹 是的话直接return\n\n      if (path == this.$store.state.currentFolder) {\n        return;\n      } // let arr = [];\n      // if (!type || type == \"current\") {\n      //   // arr.push(this.$store.state.rightClickItem.id);\n      //   arr.push(this.rightClickItem.id);\n      // } else if (type == \"mult\") {\n      //   this.selectFiles.forEach((item) => arr.push(item.id));\n      // } else if (type == \"drag\") {\n      //   list.forEach((item) => arr.push(item.id));\n      // }\n      // let res = await this.$request(\n      //   `/educenter/file/fileMove?id=${arr}`,\n      //   path,\n      //   \"post\",\n      //   \"params\",\n      //   \"json\"\n      // );\n      // console.log(res);\n      // if (res.data.success) {\n      //   this.$message.success(\"移动成功!\");\n      //   // 避免直接获取数据，以避免dom刷新 影响用户体验\n      //   // this.$emit(\"getListData\");\n      //   if (!type || type == \"current\") {\n      //     let index = this.listData.findIndex(\n      //       (item) => item.id == this.rightClickItem.id\n      //     );\n      //     this.listData.splice(index, 1);\n      //     // 再判断一下被删除的item是否被多选了\n      //     let idx = this.selectFiles.findIndex(\n      //       (item) => item.id == this.rightClickItem.id\n      //     );\n      //     if (idx != -1) {\n      //       this.selectFiles.splice(idx, 1);\n      //     }\n      //   } else if (type == \"mult\") {\n      //     this.selectFiles.forEach((item) => {\n      //       let index = this.listData.findIndex((i) => i.id == item.id);\n      //       this.listData.splice(index, 1);\n      //     });\n      //     this.selectFiles.splice(0, this.selectFiles.length);\n      //   } else if (type == \"drag\") {\n      //     list.forEach((item) => {\n      //       let index = this.listData.findIndex((i) => i.id == item.id);\n      //       this.listData.splice(index, 1);\n      //     });\n      //     this.selectFiles.splice(0, this.selectFiles.length);\n      //   }\n      // } else {\n      //   this.$message.error(\"移动失败,请稍后重试!\");\n      // }\n\n    },\n\n    // 分享当前文件\n    shareCurrentFile(item) {\n      // console.log(item);\n      this.shareItem = item;\n      this.isShareDialogShow = true;\n    },\n\n    // 点击移动文件的回调\n    moveFile(type) {\n      this.isFolderDialogShow = true;\n\n      if (!type || type == \"current\") {\n        this.moveType = \"current\";\n      } else {\n        this.moveType = \"mult\";\n      }\n    },\n\n    // 删除当前文件夹\n    async deleteCurrentFolder(item) {\n      // console.log(item);\n      // let res = await this.$request(\n      //   `/educenter/dir/deleteDirStruct/${this.$store.state.userInfo.id}/${item.id}`,\n      //   this.$store.state.currentFolder +\n      //     \"/\" +\n      //     item.name.substr(0, item.name.length - 1),\n      //   \"post\",\n      //   \"params\",\n      //   \"json\"\n      // );\n      // // console.log(res);\n      // if (res.data.success) {\n      //   this.$emit(\"getFolderList\");\n      // }\n      this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\n      this.$axios({\n        url: \"/user/file/delete\",\n        method: \"delete\",\n        data: {\n          identity: item.identity\n        }\n      }).then(res => {\n        console.log(res.data);\n\n        if (res.data.success) {\n          this.$message.success(\"删除成功!\"); // this.$emit(\"getFolderList\");\n        } else {\n          this.$message.error(\"删除失败,请稍后重试!\");\n        }\n      });\n    },\n\n    // 重命名当前文件夹\n    renameCurrentFolder(item) {\n      this.isFolderRenameShow = true;\n    },\n\n    onDragEndItem() {\n      document.ondragover = null;\n      this.showDragImgContainer = false;\n      let imgContainer = document.querySelector(\".dragImgContainer\");\n      imgContainer.innerHTML = \"\";\n    },\n\n    // 文件夹对象\n    dropItem(item) {\n      console.log(item); // 获得文件夹的完整路径\n\n      let currentFolder = (\"/\" + this.findPathByLeafId(item.name, [this.folderList]).join(\"\")).slice(0, this.findPathByLeafId(item.name, [this.folderList]).join(\"\").length); // console.log(currentFolder);\n\n      this.confirmMove(currentFolder, \"drag\", this.dragItemList);\n      this.dragItemList = [];\n    }\n\n  },\n  computed: {\n    computeType() {\n      return getTypeIcon;\n    }\n\n  },\n  watch: {\n    \"$store.state.isSelectAll\"(current) {\n      if (isClickSelectAll == false) {\n        isClickSelectAll = true;\n        return;\n      }\n\n      this.selectAll(current);\n    },\n\n    selectFiles(current) {\n      let listItem = document.querySelectorAll(\".listItem\");\n\n      if (current.length == listItem.length) {\n        this.$store.commit(\"updateIsSelectAll\", true);\n      } else {\n        if (this.$store.state.isSelectAll == true) {\n          isClickSelectAll = false;\n          this.$store.commit(\"updateIsSelectAll\", false);\n        }\n      }\n    },\n\n    // 监听是否正在新建文件夹的状态\n    \"$store.state.isCreateFolder\"(current) {\n      this.isCreateFolderShow = current;\n\n      if (current == true) {\n        if (this.$store.state.showType == \"icon\") {\n          this.$nextTick(() => {\n            document.querySelector(\".createNameInput\").focus();\n          });\n        } else if (this.$store.state.showType == \"table\") {\n          this.$nextTick(() => {\n            document.querySelector(\".tableCreateInput\").focus();\n          });\n        }\n      }\n    },\n\n    folderList(current) {\n      this.getCurrentLocation();\n      console.log(\"885---------------------\");\n    },\n\n    // 监听选中文件的变化\n    selectFiles(current) {\n      this.$store.commit(\"updateSelectFiles\", current);\n    },\n\n    // 监听是否正在获取文件夹\n    \"$store.state.isGetingFolder\"(current) {\n      if (current == false) {\n        this.createdName = \"\";\n        this.$store.commit(\"updateIsCreateFolder\", false);\n      }\n    },\n\n    // 监听排序方式\n    \"$store.state.sortType\"(current) {\n      if (current == \"time\") {\n        this.listData.sort((a, b) => {\n          return Date.parse(a.gmtCreate) - Date.parse(b.gmtCreate);\n        });\n      } else if (current == \"size\") {\n        this.listData.sort((a, b) => {\n          return a.size - b.size;\n        });\n      }\n    },\n\n    searchFolder(current) {\n      this.currentChildrenFolder = current;\n    }\n\n  },\n\n  created() {},\n\n  mounted() {\n    // 获取组件的offset\n    let Card = document.querySelector(\".iconTypeListContainer\"); // console.log(Card);\n\n    this.cardoffsetTop = Card.offsetTop;\n    this.cardoffsetLeft = Card.offsetLeft; // 监听页面窗口大小变化\n\n    window.addEventListener(\"resize\", e => {\n      // console.log(e);\n      this.pageWidth = document.body.clientWidth;\n      this.pageHeight = document.body.clientHeight;\n    }); // 监听所有点击事件\n\n    document.onclick = e => {\n      // console.log(e);\n      if (this.isMenuShow == true || this.isFolderMenuShow == true) {\n        this.isMenuShow = false;\n        this.isFolderMenuShow = false;\n        this.banScroll = false;\n      }\n\n      if (this.$store.state.isUserInfoCardMenuShow) {\n        this.$store.commit(\"updateIsUserInfoCardMenuShow\", false);\n      }\n    };\n  }\n\n};","map":{"version":3,"mappings":";AAsVA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC,SADA;IAEAC,WAFA;IAGAC,cAHA;IAIAC,YAJA;IAKAC,KALA;IAMAC,WANA;IAOAC,WAPA;IAQAC,WARA;IASAC;EATA,CADA;EAYAC,oBAZA;;EAaAC;IACA;MACAC,eADA;MAEAC,iBAFA;MAGAC,UAHA;MAIAC,WAJA;MAKAC,gBALA;MAMAC,iBANA;MAOA;MACAC,eARA;MASA;MACAC,mBAVA;MAWA;MACAC,kBAZA;MAaA;MACAC,eAdA;MAeAC,yBAfA;MAgBA;MACAC,sBAjBA;MAkBA;MACAC,cAnBA;MAoBA;MACAC,yBArBA;MAsBA;MACAC,uBAvBA;MAwBA;MACAC;QACAC,OADA;QAEAlB;MAFA,CAzBA;MA6BA;MACAmB,aA9BA;MA+BA;MACAC,sBAhCA;MAiCA;MACAC,oCAlCA;MAmCA;MACAC,sCApCA;MAqCA;MACAC,eAtCA;MAuCAC,gBAvCA;MAwCA;MACAC,gBAzCA;MA0CA;MACAC,yBA3CA;MA4CA;MACAC,6BA7CA;MA8CA;MACAC,mBA/CA;MAgDA;MACAC,wBAjDA;MAkDA;MACAC,kBAnDA;MAoDA;MACAC,8BArDA;MAsDA;MACAC,gBAvDA;MAwDA;MACAC,2BAzDA;MA0DA;MACAC;QACAC,IADA;QAEAC;MAFA,CA3DA;MA+DA;MACAC,wBAhEA;MAiEA;MACAC;IAlEA;EAoEA,CAlFA;;EAmFAC;IACA;IACAC;MACAC,WADA;;MAEAC;QACA;MACA;;IAJA,CAFA;IAQAC;MACAF,YADA;;MAEAC;QACA;MACA;;IAJA,CARA;IAcA;IACAE;MACAH,YADA;;MAEAC;QACA;MACA;;IAJA,CAfA;IAqBA;IACAG;MACAJ,YADA;;MAEAC;QACA;MACA;;IAJA,CAtBA;IA4BAI;MACAL,WADA;;MAEAC;QACA;MACA;;IAJA;EA5BA,CAnFA;EAuHAK;IACA;IACAC;MACA;MACA;MACA;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAZA;;IAcA;IACA;IACAC;MACA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAvBA;;IAyBA;IACAC;MACA;MACA;QACA;MACA;;MACA;MACAC,qBANA,CAOA;MACA;;MACA;MACA;MACAA,gCAXA,CAYA;MACA;;MACA;QACA,eACAC,iEADA;MAEA,CAHA,MAGA;QACA,eACAA,iEADA;MAEA;;MACA,gBACAA,+DADA,CArBA,CAwBA;;MACA,oBACAA,iEADA;MAEA,qBACAA,+DADA;;MAGA;QACA;QACA;QACA,2BAHA,CAIA;;QACA;QACA;MACA,CAPA,MAOA;QACA;QACA,wBAFA,CAGA;;QACA;MACA;IACA,CArEA;;IAuEA;IACAC;MACA;MACA;MACA;QACA;QACA;QACA;MACA,CAJA,MAIA;QACA;QACA;QACA,wDACA,CADA,EAEA,yCAFA;MAIA,CAdA,CAeA;;;MACA;QACA;UACAC;QACA,CAFA,MAEA;UACAA;QACA;MACA,CANA,EAhBA,CAuBA;IACA,CAhGA;;IAkGA;IACA;MACAH,kBADA,CAEA;;MACA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;QACA;MACA,CAXA,CAaA;MACA;MACA;MACA;MACA;MACA;;;MACAA;;MACA;QACA;QACAA;QACAA;;QACA;UACA;UACA;YACAjC,wBADA;YAEAqC,cAFA;YAGAtD;cACAuD,uBADA;cAEAxD;YAFA;UAHA,GAOAyD,IAPA,CAOAC;YACAP;;YACA;cACA;YACA,CAFA,MAEA;cACA;YACA;UACA,CAdA;QAeA;;QACA;QACA;MACA,CAxBA,MAwBA;QACA;QACAA;;QACA;UACA;UACA;YACAjC,wBADA;YAEAqC,cAFA;YAGAtD;cACAuD,uBADA;cAEAxD;YAFA;UAHA,GAOAyD,IAPA,CAOAC;YACAP;;YACA;cACA;YACA,CAFA,MAEA;cACA;YACA;UACA,CAdA;QAeA;;QACA;QACA;MACA,CAnEA,CAoEA;MACA;;;MACA,sBAtEA,CAuEA;IACA,CA3KA;;IA6KA;IACAQ;MACA;MACA;QACA;;QACA;UACAC;QACA,CAFA,MAEA;UACAA;QACA;;QACA;UACA;YACA;YACA;UACA,CAHA,MAGA;YACA;YACA;cACA1C,0BADA;cAEAqC,cAFA;cAGAtD;gBACA4D,4CADA;gBAEA7D;cAFA;YAHA,GAOAyD,IAPA,CAOAC;cACAP;;cACA;gBACA;gBACA;gBACA;cACA,CAJA,MAIA;gBACA,kCADA,CAEA;gBACA;cACA;YACA,CAlBA;UAmBA;QACA;MACA,CAlCA;IAmCA,CAnNA;;IAqNA;IACAW;MACA;MACAX;MACA;MACAA;MACAA,4BALA,CAMA;;MACA;QACA;QACA;MACA,CAHA,CAIA;MAJA,KAKA;QACA;QACA;MACA,CAHA,CAIA;MAJA,KAKA;QACA;QACA;MACA,CAHA,CAIA;MAJA,KAKA;QACA;MACA;IACA,CA/OA;;IAiPA;IACA;MACA;MACA;;MACA;QACAY;MACA,CAFA,MAEA;QACA;UACAA;QACA,CAFA;MAGA;;MACAZ;MACA;MACA;QACAjC,wBADA;QAEAqC,gBAFA;QAGAtD;UACAuD;QADA;MAHA,GAMAC,IANA,CAMAC;QACAP;;QACA;UACA,oCACAa,yCADA;UAGA,+BAJA,CAKA;;UACA,qCACAA,yCADA;;UAGA;YACA;UACA;;UACA;QACA,CAbA,MAaA;UACA;QACA;MACA,CAxBA;IAyBA,CAvRA;;IAyRA;IACA;IACA;IACA;IACAC;MACA;QACAC;MACA;;MACA;QACA;QACAC;;QACA;UACA;QACA;;QACA;UACA,uCACAC,MADA,EAEAC,qBAFA,EAGAF,OAHA;;UAKA;YACA;UACA;QACA;MACA;IACA,CAlTA;;IAoTA;IACA;IACAG;MACA;MACA;MACA;MACA;QACApD,sBADA;QAEAqC,cAFA;QAGAtD;UACAsE;QADA;MAHA,GAMAd,IANA,CAMAC;QACAP;;QACA;UACA;UACA;UACA;UACA;QACA,CALA,MAKA;UACA;QACA;MACA,CAhBA;IAiBA,CA3UA;;IA6UA;IACAqB;MACA;MACArB;MACA;MACAsB;MACA;MACAtB,iBANA,CAOA;MACA;MACA;MACA;MACA;;MACA;MACAA;;MACA;QACA;QACA;UACA,iDACAa,2DADA;UAGA;UACA,6BACA,8CADA,CALA,CAOA;UACA;QACA,CAXA,CAYA;;MACA,CAbA,MAaA;QACA;QACA;MACA;IACA,CA7WA;;IA+WA;IACAU;MACA,QADA,CAEA;;MACA;;MACA;QACAX;MACA,CAFA,MAEA;QACAA;MACA;;MACAA;QACA;QACAY;UACA;YACAxB,sBADA,CAEA;;YACA,8BACA,iDADA,EAEA,EAFA,EAGA,MAHA;YAKAA;YACAjC;UACA,CAVA,MAUA;YACAA;UACA;;UACA;YACAlB,2BADA;YAEAkB;UAFA;QAIA,CAlBA;MAmBA,CArBA;IAsBA,CA/YA;;IAiZA;IACA;MACA;MACAiC;MACAA,8CAHA,CAIA;;MACA;QACA;MACA,CAPA,CASA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;IACA,CA5cA;;IA8cA;IACAyB;MACA;MACA;MACA;IACA,CAndA;;IAqdA;IACAC;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CA7dA;;IA+dA;IACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA3D,wBADA;QAEAqC,gBAFA;QAGAtD;UACAuD;QADA;MAHA,GAMAC,IANA,CAMAC;QACAP;;QACA;UACA,+BADA,CAEA;QACA,CAHA,MAGA;UACA;QACA;MACA,CAdA;IAeA,CA/fA;;IAigBA;IACA2B;MACA;IACA,CApgBA;;IAsgBAC;MACAzB;MACA;MACA;MACA0B;IACA,CA3gBA;;IA6gBA;IACAC;MACA9B,kBADA,CAEA;;MACA,qBACA,kEADA,EAEA+B,KAFA,CAGA,CAHA,EAIA,mEAJA,EAHA,CASA;;MACA;MACA;IACA;;EA1hBA,CAvHA;EAmpBAC;IACAC;MACA;IACA;;EAHA,CAnpBA;EAwpBAC;IACA;MACA;QACAC;QACA;MACA;;MACA;IACA,CAPA;;IASApF;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;UACAoF;UACA;QACA;MACA;IACA,CAnBA;;IAqBA;IACA;MACA;;MACA;QACA;UACA;YACAhC;UACA,CAFA;QAGA,CAJA,MAIA;UACA;YACAA;UACA,CAFA;QAGA;MACA;IACA,CAnCA;;IAoCAX;MACA;MACAQ;IACA,CAvCA;;IAyCA;IACAjD;MACA;IACA,CA5CA;;IA8CA;IACA;MACA;QACA;QACA;MACA;IACA,CApDA;;IAsDA;IACA;MACA;QACA;UACA;QACA,CAFA;MAGA,CAJA,MAIA;QACA;UACA;QACA,CAFA;MAGA;IACA,CAjEA;;IAkEA4C;MACA;IACA;;EApEA,CAxpBA;;EA8tBAyC,YA9tBA;;EA+tBAC;IACA;IACA,4DAFA,CAGA;;IACA;IACA,sCALA,CAOA;;IACAC;MACA;MACA;MACA;IACA,CAJA,EARA,CAcA;;IACAnC;MACA;MACA;QACA;QACA;QACA;MACA;;MACA;QACA;MACA;IACA,CAVA;EAWA;;AAzvBA","names":["components","Attribute","ImagePlayer","RightClickMenu","FolderDialog","GoTop","ShareDialog","MusicPlayer","VideoPlayer","App","name","data","selectFiles","isMenuShow","menuTop","menuLeft","cardoffsetTop","cardoffsetLeft","renameInput","isRenameShow","rightClickItem","createdName","isCreateFolderShow","isImgDialogShow","currentImg","currentChildrenFolder","isFolderMenuShow","downloadFileInfo","url","videoList","isAttributeShow","pageWidth","pageHeight","attributeTop","attributeLeft","banScroll","isFolderDialogShow","isCurrentFileCollected","moveType","rightClickFolderItem","currentFolderId","isFolderRenameInputShow","dragItemList","showDragImgContainer","dragImgContainerPosition","x","y","isShareDialogShow","shareItem","props","listData","type","default","folderList","rightClickMenuType","showType","searchFolder","methods","selectCurrentItem","selectAll","showMenu","console","e","rename","document","method","identity","then","res","createNameDone","input","parent_id","openCurrentFile","arr","item","findPathByLeafId","path","tmpPath","leafId","nodes","openCurrentFolder","id","getCurrentLocation","currentFolder","downloadCurrentFile","setTimeout","shareCurrentFile","moveFile","renameCurrentFolder","onDragEndItem","imgContainer","dropItem","slice","computed","computeType","watch","isClickSelectAll","created","mounted","window"],"sourceRoot":"src/components","sources":["IconTypeList.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"iconTypeListContainer\"\r\n    :class=\"[\r\n      banScroll ? 'banScroll' : '',\r\n      $store.state.showType == 'icon' ? '' : 'tableTypeListContainer',\r\n    ]\"\r\n  >\r\n    <div class=\"IconTypeList\" v-if=\"$store.state.showType == 'icon'\">\r\n      <!-- 文件夹 -->\r\n      <div\r\n        class=\"listItem folderItem\"\r\n        v-for=\"(item, index) in currentChildrenFolder\"\r\n        @dblclick=\"openCurrentFolder(item)\"\r\n        @contextmenu.prevent=\"showMenu($event, item, 'folderMenu')\"\r\n        @dragstart=\"(e) => e.preventDefault()\"\r\n        @dragover=\"(e) => e.preventDefault()\"\r\n        @drop=\"dropItem(item)\"\r\n        :key=\"index\"\r\n      >\r\n        <div class=\"imgContainer\">\r\n          <img src=\"../assets/img/folder.png\" alt=\"\" :draggable=\"false\" />\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"renameInput\"\r\n          class=\"renameInput\"\r\n          @blur=\"\r\n            rightClickFolderItem.id\r\n              ? renameDone(rightClickFolderItem, index, 'folder')\r\n              : ''\r\n          \"\r\n          @keyup.enter=\"\r\n            rightClickFolderItem.id\r\n              ? renameDone(rightClickFolderItem, index, 'folder')\r\n              : ''\r\n          \"\r\n          v-if=\"isFolderRenameInputShow && rightClickFolderItem.id == item.id\"\r\n        />\r\n        <div class=\"name\" v-else>\r\n          {{\r\n            item.name == null\r\n              ? \"NoNameFolder\"\r\n              : item.name\r\n          }}\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 新建文件夹的模板 -->\r\n      <div class=\"listItem createItem\" v-if=\"isCreateFolderShow\">\r\n        <img src=\"../assets/img/folder.png\" alt=\"\" />\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"createdName\"\r\n          class=\"renameInput createNameInput\"\r\n          @blur=\"createNameDone\"\r\n          @keyup.enter=\"createNameDone\"\r\n        />\r\n      </div>\r\n\r\n      <!-- 文件列表 -->\r\n      <div\r\n        class=\"listItem\"\r\n        :class=\"selectFiles.find((i) => i.id == item.id) ? 'selectFile' : ''\"\r\n        v-for=\"(item, index) in listData\"\r\n        :key=\"item.id\"\r\n        @click=\"selectCurrentItem(item)\"\r\n        @dblclick=\"openCurrentFile(item)\"\r\n        @contextmenu.prevent=\"showMenu($event, item)\"\r\n        :draggable=\"rightClickMenuType == 'files'\"\r\n        @dragend=\"onDragEndItem\"\r\n        slot=\"reference\"\r\n      >\r\n        <div class=\"imgContainer\">\r\n          <img\r\n            src=\"../assets/img/music.png\"\r\n            alt=\"\"\r\n            v-if=\"item.filetype == 'audio'\"\r\n            :draggable=\"false\"\r\n          />\r\n          <img\r\n            :src=\"item.path\"\r\n            alt=\"\"\r\n            v-else-if=\"item.filetype == 'image'\"\r\n            :draggable=\"false\"\r\n          />\r\n\r\n          <!-- 视频文件 -->\r\n          <div class=\"videoContainer\" v-else-if=\"item.ext == '.mp4'\">\r\n            <video :src=\"item.path\" class=\"videoItem\" preload=\"meta\"></video>\r\n            <div class=\"iconContainer\">\r\n              <i class=\"iconfont icon-play_nor\"></i>\r\n            </div>\r\n          </div>\r\n          <img\r\n            :src=\"require(`../assets/img/${computeType(item.filetype)}.png`)\"\r\n            alt=\"\"\r\n            v-else\r\n            :draggable=\"false\"\r\n          />\r\n          <img\r\n            src=\"../assets/img/collect.png\"\r\n            alt=\"\"\r\n            class=\"collectIcon\"\r\n            v-if=\"item.collection\"\r\n            :draggable=\"false\"\r\n          />\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"renameInput\"\r\n          class=\"renameInput\"\r\n          @blur=\"rightClickItem.id ? renameDone(rightClickItem, index) : ''\"\r\n          @keyup.enter=\"\r\n            rightClickItem.id ? renameDone(rightClickItem, index) : ''\r\n          \"\r\n          v-if=\"isRenameShow && rightClickItem.id == item.id\"\r\n        />\r\n        <div class=\"name\" v-else>\r\n          {{ item.name == null ? \"NoNameFile\" : item.name }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"tableTypeList\" v-else>\r\n      <!-- 文件夹 -->\r\n      <div\r\n        class=\"tableListItem\"\r\n        v-for=\"(item, index) in currentChildrenFolder\"\r\n        @dblclick=\"openCurrentFolder(item)\"\r\n        @contextmenu.prevent=\"showMenu($event, item, 'folderMenu')\"\r\n        @dragover=\"(e) => e.preventDefault()\"\r\n        @drop=\"dropItem(item)\"\r\n        :key=\"index\"\r\n      >\r\n        <div class=\"tableImgContainer\">\r\n          <img src=\"../assets/img/folder.png\" alt=\"\" :draggable=\"false\" />\r\n        </div>\r\n        <div class=\"tableName\">\r\n          {{\r\n            item.name == null\r\n              ? \"NoNameFolder\"\r\n              : item.name.substr(0, item.name.length - 1)\r\n          }}\r\n        </div>\r\n        <div class=\"tableCollect\">-</div>\r\n        <div class=\"tableItemSize\">-</div>\r\n        <div class=\"tableItemCreateTime\">-</div>\r\n      </div>\r\n\r\n      <!-- 新建文件夹的模板 -->\r\n      <div class=\"tableListItem\" v-if=\"isCreateFolderShow\">\r\n        <img src=\"../assets/img/folder.png\" alt=\"\" />\r\n        <div class=\"tableCreateInputContainer\">\r\n          <input\r\n            type=\"text\"\r\n            v-model=\"createdName\"\r\n            class=\"tableCreateInput\"\r\n            @blur=\"createNameDone\"\r\n            @keyup.enter=\"createNameDone\"\r\n          />currentFolder\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 文件列表 -->\r\n      <div\r\n        class=\"tableListItem\"\r\n        :class=\"selectFiles.find((i) => i.id == item.id) ? 'selectFile' : ''\"\r\n        v-for=\"(item, index) in listData\"\r\n        :key=\"item.id\"\r\n        @click=\"selectCurrentItem(item)\"\r\n        @dblclick=\"openCurrentFile(item)\"\r\n        @contextmenu.prevent=\"showMenu($event, item)\"\r\n        :draggable=\"rightClickMenuType == 'files'\"\r\n        @dragend=\"onDragEndItem\"\r\n        slot=\"reference\"\r\n      >\r\n        <div class=\"tableImgContainer\">\r\n          <img\r\n            src=\"../assets/img/music.png\"\r\n            alt=\"\"\r\n            v-if=\"item.filetype == 'audio'\"\r\n            :draggable=\"false\"\r\n          />\r\n          <el-image\r\n            :src=\"item.url\"\r\n            alt=\"\"\r\n            v-else-if=\"item.filetype == 'image'\"\r\n            :draggable=\"false\"\r\n            fit=\"cover\"\r\n          />\r\n\r\n          <div class=\"tableVideoContainer\" v-else-if=\"item.ext == '.mp4'\">\r\n            <video\r\n              :src=\"item.path\"\r\n              class=\"tableVideoItem\"\r\n              preload=\"meta\"\r\n            ></video>\r\n          </div>\r\n          <img\r\n            :src=\"require(`../assets/img/${computeType(item.type)}.png`)\"\r\n            alt=\"\"\r\n            v-else\r\n            :draggable=\"false\"\r\n          />\r\n        </div>\r\n        <div\r\n          class=\"tableRenameInputContainer\"\r\n          v-if=\"isRenameShow && rightClickItem.id == item.id\"\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            v-model=\"renameInput\"\r\n            class=\"tableRenameInput\"\r\n            @blur=\"rightClickItem.id ? renameDone(rightClickItem, index) : ''\"\r\n            @keyup.enter=\"\r\n              rightClickItem.id ? renameDone(rightClickItem, index) : ''\r\n            \"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"tableName\" v-else>\r\n          {{ item.name == null ? \"NoNameFile\" : item.name + \".\" + item.type }}\r\n        </div>\r\n        <div class=\"tableCollect\">\r\n          <img src=\"../assets/img/collect.png\" alt=\"\" v-if=\"item.collection\" />\r\n        </div>\r\n        <div class=\"tableItemSize\">\r\n          {{\r\n            item.size == null\r\n              ? \"未知大小\"\r\n              : (item.size / 1048576).toFixed(2) + \" MB\"\r\n          }}\r\n        </div>\r\n        <div class=\"tableItemCreateTime\">\r\n          {{ item.gmtCreate.substr(0, 16) }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 文件右击菜单框组件 -->\r\n    <right-click-menu\r\n      :menuType=\"rightClickMenuType == 'collect' ? 'collect' : 'file'\"\r\n      :isMenuShow=\"isMenuShow\"\r\n      :menuTop=\"menuTop\"\r\n      :menuLeft=\"menuLeft\"\r\n      :isCurrentFileCollected=\"isCurrentFileCollected\"\r\n      @rename=\"rename\"\r\n      @openCurrentFile=\"openCurrentFile(rightClickItem)\"\r\n      @downloadCurrentFile=\"downloadCurrentFile('current', rightClickItem)\"\r\n      @deleteCurrentFile=\"deleteCurrentFile('current', rightClickItem)\"\r\n      @shareCurrentFile=\"shareCurrentFile(rightClickItem)\"\r\n      @showAttribute=\"\r\n        () => {\r\n          isAttributeShow = true;\r\n          this.$nextTick(() => {\r\n            this.$refs.attributeDialog.getFileAttribute();\r\n          });\r\n        }\r\n      \"\r\n      @moveFile=\"moveFile\"\r\n    ></right-click-menu>\r\n\r\n    <!-- 文件夹右击菜单框组件 -->\r\n    <right-click-menu\r\n      :menuType=\"'folder'\"\r\n      :isFolderMenuShow=\"isFolderMenuShow\"\r\n      :menuTop=\"menuTop\"\r\n      :menuLeft=\"menuLeft\"\r\n      @openCurrentFolder=\"openCurrentFolder(rightClickFolderItem)\"\r\n      @renameCurrentFolder=\"rename('folder')\"\r\n      @deleteCurrentFolder=\"deleteCurrentFolder(rightClickFolderItem)\"\r\n    ></right-click-menu>\r\n\r\n    <!-- 图片预览组件 -->\r\n    <image-player\r\n      :currentImg=\"currentImg\"\r\n      :isImgDialogShow=\"isImgDialogShow\"\r\n\r\n      @closeDialog=\"isImgDialogShow = false\"\r\n      @shareCurrentFile=\"shareCurrentFile\"\r\n    ></image-player>\r\n\r\n    <MusicPlayer>\r\n    </MusicPlayer>\r\n\r\n    <VideoPlayer>\r\n    </VideoPlayer>\r\n\r\n    <!-- 属性框组件 -->\r\n    <attribute\r\n      v-if=\"isAttributeShow\"\r\n      :fileId=\"rightClickItem.id\"\r\n      :attributeTop=\"attributeTop\"\r\n      :attributeLeft=\"attributeLeft\"\r\n      @closeAttribute=\"isAttributeShow = false\"\r\n      ref=\"attributeDialog\"\r\n    ></attribute>\r\n\r\n    <!-- 移动到中选择文件夹的dialog -->\r\n    <folder-dialog\r\n      :isFolderDialogShow=\"isFolderDialogShow\"\r\n      :moveType=\"moveType\"\r\n      :currentId=\"rightClickItem.id\"\r\n      @confirmMove=\"(info) => confirmMove(info.selectFolderId, info.currentFileId)\"\r\n      @closeFolderDialog=\"isFolderDialogShow = false\"\r\n    ></folder-dialog>\r\n\r\n    <!-- 搜索为空的提醒 -->\r\n    <div\r\n      class=\"searchTips\"\r\n      v-if=\"\r\n        $route.params.path &&\r\n        $route.params.path.search('search') != -1 &&\r\n        searchFolder.length == 0 &&\r\n        this.listData.length == 0\r\n      \"\r\n    >\r\n      没有找到相应内容哦!\r\n    </div>\r\n    <!-- 返回顶部按钮 -->\r\n    <go-top scrollObj=\".iconTypeListContainer\"></go-top>\r\n    <!-- 拖动时的预览容器 -->\r\n    <div\r\n      class=\"dragImgContainer\"\r\n      :class=\"showDragImgContainer ? 'showDragImgContainer' : ''\"\r\n      :style=\"[\r\n        { top: dragImgContainerPosition.y + 'px' },\r\n        { left: dragImgContainerPosition.x + 'px' },\r\n      ]\"\r\n    ></div>\r\n\r\n    <!-- 分享框 -->\r\n    <share-dialog\r\n      :isShareDialogShow=\"isShareDialogShow\"\r\n      :shareItem=\"shareItem\"\r\n      @closeDialog=\"isShareDialogShow = false\"\r\n    ></share-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nlet isClickSelectAll = true;\r\n\r\nimport { getTypeIcon } from \"../plugins/utils.js\";\r\n\r\nimport Attribute from \"./Attribute.vue\";\r\nimport ImagePlayer from \"./ImagePlayer.vue\";\r\nimport RightClickMenu from \"./RightClickMenu.vue\";\r\nimport FolderDialog from \"./FolderDialog.vue\";\r\nimport GoTop from \"./GoTop.vue\";\r\nimport ShareDialog from \"./ShareDialog.vue\";\r\nimport MusicPlayer from \"./MusicPlayer.vue\";\r\nimport VideoPlayer from \"./VideoPlayer.vue\";\r\nimport App from \"@/App.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    Attribute,\r\n    ImagePlayer,\r\n    RightClickMenu,\r\n    FolderDialog,\r\n    GoTop,\r\n    ShareDialog,\r\n    MusicPlayer,\r\n    VideoPlayer,\r\n    App\r\n},\r\n  name: \"IconTypeList\",\r\n  data() {\r\n    return {\r\n      selectFiles: [],\r\n      isMenuShow: false,\r\n      menuTop: 0,\r\n      menuLeft: 0,\r\n      cardoffsetTop: 0,\r\n      cardoffsetLeft: 0,\r\n      // 重命名输入框\r\n      renameInput: \"\",\r\n      // 是否显示重命名输入框\r\n      isRenameShow: false,\r\n      // 右击的item\r\n      rightClickItem: {},\r\n      // 新建文件夹名称\r\n      createdName: \"\",\r\n      isCreateFolderShow: false,\r\n      // 是否显示图片diaload\r\n      isImgDialogShow: false,\r\n      //   当前要打开diaload的图片\r\n      currentImg: {},\r\n      // 当前目录的子目录\r\n      currentChildrenFolder: [],\r\n      //   是否显示文件右键菜单\r\n      isFolderMenuShow: false,\r\n      // 下载的文件信息\r\n      downloadFileInfo: {\r\n        url: \"\",\r\n        name: \"\",\r\n      },\r\n      // 视频列表\r\n      videoList: [],\r\n      // 是否显示属性框\r\n      isAttributeShow: false,\r\n      // 页面可见区域宽\r\n      pageWidth: document.body.clientWidth,\r\n      // 页面可见区域高\r\n      pageHeight: document.body.clientHeight,\r\n      // 属性dialog的位置\r\n      attributeTop: 0,\r\n      attributeLeft: 0,\r\n      // 是否禁止页面滚动\r\n      banScroll: false,\r\n      // 是否显示文件选择框\r\n      isFolderDialogShow: false,\r\n      // 当前文件是否已收藏\r\n      isCurrentFileCollected: false,\r\n      // 文件移动类型  'mult'和'current'\r\n      moveType: \"current\",\r\n      // 右键选中的文件夹item\r\n      rightClickFolderItem: {},\r\n      // 当前文件夹的id\r\n      currentFolderId: 0,\r\n      // 是否显示文件夹重命名输入框\r\n      isFolderRenameInputShow: false,\r\n      // 被拖动的itemList\r\n      dragItemList: [],\r\n      // 是否显示dragImgContainer\r\n      showDragImgContainer: false,\r\n      // dragImgContainer的位置\r\n      dragImgContainerPosition: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      // 是否显示分享框\r\n      isShareDialogShow: false,\r\n      // 分享的文件\r\n      shareItem: {},\r\n    };\r\n  },\r\n  props: {\r\n    // type name\r\n    listData: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    folderList: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      },\r\n    },\r\n    // 右键菜单类型\r\n    rightClickMenuType: {\r\n      type: String,\r\n      default() {\r\n        return \"files\";\r\n      },\r\n    },\r\n    // item展示方式\r\n    showType: {\r\n      type: String,\r\n      default() {\r\n        return \"icon\";\r\n      },\r\n    },\r\n    searchFolder: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    // 单击item的回调\r\n    selectCurrentItem(item) {\r\n      // 操作dom  直接操作dom可以减少循环，提高性能\r\n      // let listItem = document.querySelectorAll(\".listItem\");\r\n      // 先判断该选项是否已经被选中\r\n      let i = this.selectFiles.findIndex((item1) => item1.id == item.id);\r\n      if (i == -1) {\r\n        this.selectFiles.push(item);\r\n      } else {\r\n        this.selectFiles.splice(i, 1);\r\n      }\r\n    },\r\n\r\n    // 全选\r\n    // flag为boolean 全选或者取消全选\r\n    selectAll(flag) {\r\n      // let listItem = document.querySelectorAll(\".listItem\");\r\n      if (flag) {\r\n        this.selectFiles = this.listData.concat();\r\n      } else {\r\n        this.selectFiles = [];\r\n      }\r\n    },\r\n\r\n    // 右键单击item的事件\r\n    showMenu(e, item, type) {\r\n      // 如果属性框打开，则先关闭属性框\r\n      if (this.isAttributeShow == true) {\r\n        this.isAttributeShow = false;\r\n      }\r\n      this.banScroll = true;\r\n      console.log(e, item);\r\n      // console.log(this.cardoffsetLeft);\r\n      // 获取菜单的高度\r\n      let menu = document.querySelector(\".RightClickMenu\");\r\n      let menuHeight = menu.offsetTop;\r\n      console.log([menu], menuHeight);\r\n      // 计算菜单dialog 的位置\r\n      // files的菜单高度和collect不一样\r\n      if (this.rightClickMenuType == \"files\") {\r\n        this.menuTop =\r\n          e.pageY + 250 > this.pageHeight ? this.pageHeight - 250 : e.pageY;\r\n      } else {\r\n        this.menuTop =\r\n          e.pageY + 220 > this.pageHeight ? this.pageHeight - 220 : e.pageY;\r\n      }\r\n      this.menuLeft =\r\n        e.pageX + 140 > this.pageWidth ? this.pageWidth - 140 : e.pageX;\r\n\r\n      // 计算属性dialog的位置\r\n      this.attributeTop =\r\n        e.pageY + 230 > this.pageHeight ? this.pageHeight - 230 : e.pageY;\r\n      this.attributeLeft =\r\n        e.pageX + 340 > this.pageWidth ? this.pageWidth - 340 : e.pageX;\r\n\r\n      if (!type || type == \"menu\") {\r\n        // 判断右击文件是否已收藏\r\n        this.isCurrentFileCollected = item.collection == 1 ? true : false;\r\n        this.rightClickItem = item;\r\n        // this.$store.commit(\"updateRightClickItem\", item);\r\n        this.isMenuShow = true;\r\n        this.isFolderMenuShow = false;\r\n      } else if (type == \"folderMenu\") {\r\n        this.isFolderMenuShow = true;\r\n        this.isMenuShow = false;\r\n        // this.$store.commit(\"updateRightClickFolderItem\", item);\r\n        this.rightClickFolderItem = item;\r\n      }\r\n    },\r\n\r\n    // 点击重命名的回调\r\n    rename(type) {\r\n      // 获取点击重命名的索引\r\n      // this.rightClickItem = this.$store.state.rightClickItem;\r\n      if (!type) {\r\n        // 文件\r\n        this.isRenameShow = true;\r\n        this.renameInput = this.rightClickItem.name;\r\n      } else if (type == \"folder\") {\r\n        // 文件夹\r\n        this.isFolderRenameInputShow = true;\r\n        this.renameInput = this.rightClickFolderItem.name.slice(\r\n          0,\r\n          this.rightClickFolderItem.name.length - 1\r\n        );\r\n      }\r\n      //在input的属性中添加autofocus只能触发一次 这里改用操作DOM\r\n      this.$nextTick(() => {\r\n        if (this.$store.state.showType == \"icon\") {\r\n          document.querySelector(\".renameInput\").focus();\r\n        } else if (this.$store.state.showType == \"table\") {\r\n          document.querySelector(\".tableRenameInput\").focus();\r\n        }\r\n      });\r\n      //   console.log(this.rightClickIndex, 123456);\r\n    },\r\n\r\n    // 重命名完成后的回调  失去焦点或者回车\r\n    async renameDone(item, index, type) {\r\n      console.log(item);\r\n      // 判断输入内容是否为空\r\n      if (this.renameInput.trim().length == 0) {\r\n        if (!type) {\r\n          this.$message.warning(\"文件名不能为空哦!\");\r\n          this.isRenameShow = false;\r\n        } else {\r\n          this.$message.warning(\"文件夹名称不能为空哦!\");\r\n          this.isFolderRenameInputShow = false;\r\n        }\r\n      }\r\n\r\n      // 先判断rightClickIndex是否被重置为-1 被重置为-1说明已经调用过此函数（enter和blur会冲突，导致调用两次此函数）\r\n      // 已经在html中调用方法时判断了\r\n      // if (this.rightClickItem.id) {\r\n      // 判断名字是否改变\r\n      // 如果发生改变\r\n      // console.log(this.rightClickIndex);\r\n      console.log(\"文件类型：\", type);\r\n      if (!type) {\r\n        // 文件\r\n        console.log(\"原来的名字：\", this.rightClickItem.name);\r\n        console.log(\"新修改的名字：\", this.renameInput.trim());\r\n        if (this.rightClickItem.name != this.renameInput.trim()) {\r\n            this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\r\n            this.$axios({\r\n            url: \"/user/file/update\",\r\n            method: \"post\",\r\n            data: {\r\n              identity: item.identity,\r\n              name: this.renameInput.trim(),\r\n            },\r\n          }).then((res) => {\r\n            console.log(res.data);\r\n            if (res.data.success) {\r\n              this.searchFolder[index].name = this.renameInput.trim();\r\n            } else {\r\n              this.$message.error(\"重命名失败,请稍后重试!\");\r\n            }\r\n          });\r\n        }\r\n        this.rightClickItem = {};\r\n        this.isRenameShow = false;\r\n      } else {\r\n        // 文件夹\r\n        console.log(this.renameInput);\r\n        if (this.rightClickFolderItem.name != this.renameInput.trim()) {\r\n          this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\r\n          this.$axios({\r\n            url: \"/user/file/update\",\r\n            method: \"post\",\r\n            data: {\r\n              identity: item.identity,\r\n              name: this.renameInput.trim(),\r\n            },\r\n          }).then((res) => {\r\n            console.log(res.data);\r\n            if (res.data.success) {\r\n              this.listData[index].name = this.renameInput.trim();\r\n            } else {\r\n              this.$message.error(\"重命名失败,请稍后重试!\");\r\n            }\r\n          });\r\n        }\r\n        this.rightClickFolderItem = {};\r\n        this.isFolderRenameInputShow = false;\r\n      }\r\n      // this.$store.commit(\"updateRightClickItem\", {});\r\n      // 清空renameInput\r\n      this.renameInput = \"\";\r\n      // }\r\n    },\r\n\r\n    // 新建文件夹命名完成的回调\r\n    createNameDone() {\r\n      // 避免 enter和 blur冲突调用两次此函数\r\n      this.$nextTick(async () => {\r\n        let input;\r\n        if (this.$store.state.showType == \"icon\") {\r\n          input = document.querySelector(\".createNameInput\");\r\n        } else if (this.$store.state.showType == \"table\") {\r\n          input = document.querySelector(\".tableCreateInput\");\r\n        }\r\n        if (input) {\r\n          if (this.createdName == \"\") {\r\n            this.$message.warning(\"文件夹名称不能为空哦!\");\r\n            this.$store.commit(\"updateIsCreateFolder\", false);\r\n          } else {\r\n            this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\r\n            this.$axios({\r\n            url: \"/user/folder/create\",\r\n            method: \"post\",\r\n            data: {\r\n              parent_id: this.$store.state.currentParentId,\r\n              name: this.createdName.trim(),\r\n            },\r\n          }).then((res) => {\r\n            console.log(res.data);\r\n            if (res.data.success) {\r\n              // this.$emit(\"getFolderList\");\r\n              // this.$store.commit(\"updateIsGetingFolder\", true);\r\n              this.$store.commit(\"updateIsGetingFolder\", false);\r\n            } else {\r\n              this.$message.error(res.data.msg);\r\n              // this.createdName = \"\";\r\n              // this.$store.commit(\"updateIsCreateFolder\", false);\r\n            }\r\n          });\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    // 双击打开文件\r\n    openCurrentFile(item) {\r\n      // 先判断打开的文件类型\r\n      console.log(\"isVideoPlayerShow: \", this.$store.state.isVideoPlayerShow);\r\n      let filetype = item.filetype;\r\n      console.log(\"filetype: \", filetype);\r\n      console.log(\"item: \", item);\r\n      // 打开的是video文件\r\n      if (filetype == \"video\") {\r\n        this.$store.commit(\"updateIsVideoPlayerShow\", true);\r\n        this.$store.commit(\"updateCurrentVideoInfo\", item);\r\n      }\r\n      // 打开的是音频文件\r\n      else if (filetype == \"audio\") {\r\n        this.$store.commit(\"updateIsMusicPlayerShow\", true);\r\n        this.$store.commit(\"updateCurrentMusicInfo\", item);\r\n      }\r\n      // 打开的是图片文件\r\n      else if (filetype == \"image\") {\r\n        this.currentImg = item;\r\n        this.isImgDialogShow = true;\r\n      }\r\n      // 其它文件暂时无法直接打开 提醒暂时无法直接打开，可以下载后打开\r\n      else {\r\n        this.$message.warning(\"该文件暂时不能直接打开哦,可以下载后在本地打开!\");\r\n      }\r\n    },\r\n\r\n    // 删除文件\r\n    async deleteCurrentFile(type, item) {\r\n      let res;\r\n      let arr = [];\r\n      if (type == \"current\") {\r\n        arr.push(item.id);\r\n      } else if (type == \"mult\") {\r\n        this.selectFiles.forEach((item) => {\r\n          arr.push(item.id);\r\n        });\r\n      }\r\n      console.log(\"identity: \", item.identity);\r\n      this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\r\n      this.$axios({\r\n            url: \"/user/file/delete\",\r\n            method: \"delete\",\r\n            data: {\r\n              identity: item.identity,\r\n            },\r\n          }).then((res) => {\r\n            console.log(res.data);\r\n            if (res.data.success) {\r\n               let index = this.listData.findIndex(\r\n                  (item) => item.id == this.rightClickItem.id\r\n               );\r\n                this.listData.splice(index, 1);\r\n                // 再判断一下被删除的item是否被多选了 如果被多选了，还需要再删除多选数组中的item\r\n                let idx = this.selectFiles.findIndex(\r\n                  (item) => item.id == this.rightClickItem.id\r\n                );\r\n                if (idx != -1) {\r\n                  this.selectFiles.splice(idx, 1);\r\n                }\r\n              this.$message.success(\"删除成功!\");\r\n            } else {\r\n              this.$message.error(\"删除失败,请稍后重试!\");\r\n            }\r\n          });\r\n    },\r\n\r\n    // js递归遍历树形json数据，根据关键字查找节点\r\n    //@leafId  查找的id，\r\n    //@nodes   原始Json数据\r\n    //@path    供递归使用\r\n    findPathByLeafId(leafId, nodes, path) {\r\n      if (path === undefined) {\r\n        path = [];\r\n      }\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        var tmpPath = path.concat();\r\n        tmpPath.push(nodes[i].name);\r\n        if (leafId == nodes[i].name) {\r\n          return tmpPath;\r\n        }\r\n        if (nodes[i].childrenList) {\r\n          var findResult = this.findPathByLeafId(\r\n            leafId,\r\n            nodes[i].childrenList,\r\n            tmpPath\r\n          );\r\n          if (findResult) {\r\n            return findResult;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    // 打开当前双击的文件夹\r\n    // 点击的是folderList中第 index个子目录\r\n    openCurrentFolder(item) {\r\n      this.$store.commit(\"updateLastParentId\", this.$store.state.currentParentId)\r\n      this.$store.commit(\"updateCurrentParentId\", item.id)\r\n      this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\r\n      this.$axios({\r\n        url: \"/user/file/list\",\r\n        method: \"post\",\r\n        data: {\r\n          id: this.$store.state.currentParentId,\r\n        }\r\n        }).then((res) => {\r\n          console.log(res.data);\r\n          if (res.data.success) {\r\n            // this.listData = res.data.files_list\r\n            // this.searchFolder = res.data.folder_list\r\n            this.$emit('update:listData', res.data.files_list)\r\n            this.$emit('update:searchFolder', res.data.folder_list)\r\n          } else {\r\n            this.$message.error(\"文件请求失败\");\r\n          }\r\n        });\r\n    },\r\n\r\n    // 判断当前所在的文件夹位置\r\n    getCurrentLocation() {\r\n      if (this.$route.params.path.search(\"search\") != -1) return;\r\n      console.log(612);\r\n      let currentFolder = this.$route.params.path;\r\n      currentFolder = currentFolder.slice(1, currentFolder.length);\r\n      let arr = currentFolder.split(\"/\");\r\n      console.log(arr);\r\n      // 如果是/search就不计算当前位置了\r\n      // if (arr[arr.length - 1] == \"search\") {\r\n      //   return;\r\n      // }\r\n      // console.log(arr);\r\n      this.currentChildrenFolder = this.folderList.childrenList;\r\n      console.log(this.folderList);\r\n      if (arr.length > 1) {\r\n        // 说明不在根目录\r\n        for (var i = 1; i < arr.length; i++) {\r\n          let index = this.currentChildrenFolder.findIndex(\r\n            (item) => item.name.substr(0, item.name.length - 1) == arr[i]\r\n          );\r\n          this.currentFolderId = this.currentChildrenFolder[index].id;\r\n          this.currentChildrenFolder =\r\n            this.currentChildrenFolder[index].childrenList;\r\n          // console.log(482, this.currentChildrenFolder[index]);\r\n          // console.log(this.currentChildrenFolder);\r\n        }\r\n        // console.log(\"currentFolderId\", this.currentFolderId);\r\n      } else {\r\n        // console.log(348, this.currentChildrenFolder);\r\n        this.currentFolderId = 1;\r\n      }\r\n    },\r\n\r\n    // 点击下载文件的回调\r\n    downloadCurrentFile(type, item) {\r\n      let url;\r\n      // 循环的数组，里面的item是索引\r\n      let arr = [];\r\n      if (type == \"current\") {\r\n        arr.push(item);\r\n      } else if (type == \"mult\") {\r\n        arr = this.selectFiles;\r\n      }\r\n      arr.forEach((i) => {\r\n        // 循环执行的速度太快，watch来不及监听 这里通过定时器放到异步执行\r\n        setTimeout(async () => {\r\n          if (i.filetype == \"video\" || i.filetype == \"audio\") {\r\n            console.log(\"i: \", i);\r\n            // 请求url\r\n            let res = await this.$request(\r\n              \"/eduoss/fileoss/getPlayAuth?isList=\" + i.videoId,\r\n              \"\",\r\n              \"post\"\r\n            );\r\n            console.log(res);\r\n            url = res.data.data.urlList[0].url;\r\n          } else {\r\n            url = \"/downloadfile/\" + i.url.split(\"com/\")[1];\r\n          }\r\n          this.$store.commit(\"updateCurrentDownloadFileInfo\", {\r\n            name: i.name + \".\" + i.type,\r\n            url,\r\n          });\r\n        });\r\n      });\r\n    },\r\n\r\n    // 移动文件\r\n    async confirmMove(selectFolderId, currentFileId, list) {\r\n      // 把parentid传过来\r\n      console.log(\"selectFolderId: \", selectFolderId);\r\n      console.log(\"currentFileId: \", currentFileId);\r\n      // 先判断是否是当前文件夹 是的话直接return\r\n      if (path == this.$store.state.currentFolder) {\r\n        return;\r\n      }\r\n\r\n      // let arr = [];\r\n      // if (!type || type == \"current\") {\r\n      //   // arr.push(this.$store.state.rightClickItem.id);\r\n      //   arr.push(this.rightClickItem.id);\r\n      // } else if (type == \"mult\") {\r\n      //   this.selectFiles.forEach((item) => arr.push(item.id));\r\n      // } else if (type == \"drag\") {\r\n      //   list.forEach((item) => arr.push(item.id));\r\n      // }\r\n      // let res = await this.$request(\r\n      //   `/educenter/file/fileMove?id=${arr}`,\r\n      //   path,\r\n      //   \"post\",\r\n      //   \"params\",\r\n      //   \"json\"\r\n      // );\r\n      // console.log(res);\r\n      // if (res.data.success) {\r\n      //   this.$message.success(\"移动成功!\");\r\n      //   // 避免直接获取数据，以避免dom刷新 影响用户体验\r\n      //   // this.$emit(\"getListData\");\r\n      //   if (!type || type == \"current\") {\r\n      //     let index = this.listData.findIndex(\r\n      //       (item) => item.id == this.rightClickItem.id\r\n      //     );\r\n      //     this.listData.splice(index, 1);\r\n      //     // 再判断一下被删除的item是否被多选了\r\n      //     let idx = this.selectFiles.findIndex(\r\n      //       (item) => item.id == this.rightClickItem.id\r\n      //     );\r\n      //     if (idx != -1) {\r\n      //       this.selectFiles.splice(idx, 1);\r\n      //     }\r\n      //   } else if (type == \"mult\") {\r\n      //     this.selectFiles.forEach((item) => {\r\n      //       let index = this.listData.findIndex((i) => i.id == item.id);\r\n      //       this.listData.splice(index, 1);\r\n      //     });\r\n      //     this.selectFiles.splice(0, this.selectFiles.length);\r\n      //   } else if (type == \"drag\") {\r\n      //     list.forEach((item) => {\r\n      //       let index = this.listData.findIndex((i) => i.id == item.id);\r\n      //       this.listData.splice(index, 1);\r\n      //     });\r\n      //     this.selectFiles.splice(0, this.selectFiles.length);\r\n      //   }\r\n      // } else {\r\n      //   this.$message.error(\"移动失败,请稍后重试!\");\r\n      // }\r\n    },\r\n\r\n    // 分享当前文件\r\n    shareCurrentFile(item) {\r\n      // console.log(item);\r\n      this.shareItem = item;\r\n      this.isShareDialogShow = true;\r\n    },\r\n\r\n    // 点击移动文件的回调\r\n    moveFile(type) {\r\n      this.isFolderDialogShow = true;\r\n      if (!type || type == \"current\") {\r\n        this.moveType = \"current\";\r\n      } else {\r\n        this.moveType = \"mult\";\r\n      }\r\n    },\r\n\r\n    // 删除当前文件夹\r\n    async deleteCurrentFolder(item) {\r\n      // console.log(item);\r\n      // let res = await this.$request(\r\n      //   `/educenter/dir/deleteDirStruct/${this.$store.state.userInfo.id}/${item.id}`,\r\n      //   this.$store.state.currentFolder +\r\n      //     \"/\" +\r\n      //     item.name.substr(0, item.name.length - 1),\r\n      //   \"post\",\r\n      //   \"params\",\r\n      //   \"json\"\r\n      // );\r\n      // // console.log(res);\r\n      // if (res.data.success) {\r\n      //   this.$emit(\"getFolderList\");\r\n      // }\r\n      this.$axios.defaults.headers.common[\"Authorization\"] = window.localStorage.getItem(\"token\");\r\n      this.$axios({\r\n            url: \"/user/file/delete\",\r\n            method: \"delete\",\r\n            data: {\r\n              identity: item.identity,\r\n            },\r\n          }).then((res) => {\r\n            console.log(res.data);\r\n            if (res.data.success) {\r\n              this.$message.success(\"删除成功!\");\r\n              // this.$emit(\"getFolderList\");\r\n            } else {\r\n              this.$message.error(\"删除失败,请稍后重试!\");\r\n            }\r\n          });\r\n    },\r\n\r\n    // 重命名当前文件夹\r\n    renameCurrentFolder(item) {\r\n      this.isFolderRenameShow = true;\r\n    },\r\n\r\n    onDragEndItem() {\r\n      document.ondragover = null;\r\n      this.showDragImgContainer = false;\r\n      let imgContainer = document.querySelector(\".dragImgContainer\");\r\n      imgContainer.innerHTML = \"\";\r\n    },\r\n\r\n    // 文件夹对象\r\n    dropItem(item) {\r\n      console.log(item);\r\n      // 获得文件夹的完整路径\r\n      let currentFolder = (\r\n        \"/\" + this.findPathByLeafId(item.name, [this.folderList]).join(\"\")\r\n      ).slice(\r\n        0,\r\n        this.findPathByLeafId(item.name, [this.folderList]).join(\"\").length\r\n      );\r\n      // console.log(currentFolder);\r\n      this.confirmMove(currentFolder, \"drag\", this.dragItemList);\r\n      this.dragItemList = [];\r\n    },\r\n  },\r\n  computed: {\r\n    computeType() {\r\n      return getTypeIcon;\r\n    },\r\n  },\r\n  watch: {\r\n    \"$store.state.isSelectAll\"(current) {\r\n      if (isClickSelectAll == false) {\r\n        isClickSelectAll = true;\r\n        return;\r\n      }\r\n      this.selectAll(current);\r\n    },\r\n\r\n    selectFiles(current) {\r\n      let listItem = document.querySelectorAll(\".listItem\");\r\n      if (current.length == listItem.length) {\r\n        this.$store.commit(\"updateIsSelectAll\", true);\r\n      } else {\r\n        if (this.$store.state.isSelectAll == true) {\r\n          isClickSelectAll = false;\r\n          this.$store.commit(\"updateIsSelectAll\", false);\r\n        }\r\n      }\r\n    },\r\n\r\n    // 监听是否正在新建文件夹的状态\r\n    \"$store.state.isCreateFolder\"(current) {\r\n      this.isCreateFolderShow = current;\r\n      if (current == true) {\r\n        if (this.$store.state.showType == \"icon\") {\r\n          this.$nextTick(() => {\r\n            document.querySelector(\".createNameInput\").focus();\r\n          });\r\n        } else if (this.$store.state.showType == \"table\") {\r\n          this.$nextTick(() => {\r\n            document.querySelector(\".tableCreateInput\").focus();\r\n          });\r\n        }\r\n      }\r\n    },\r\n    folderList(current) {\r\n      this.getCurrentLocation();\r\n      console.log(\"885---------------------\");\r\n    },\r\n\r\n    // 监听选中文件的变化\r\n    selectFiles(current) {\r\n      this.$store.commit(\"updateSelectFiles\", current);\r\n    },\r\n\r\n    // 监听是否正在获取文件夹\r\n    \"$store.state.isGetingFolder\"(current) {\r\n      if (current == false) {\r\n        this.createdName = \"\";\r\n        this.$store.commit(\"updateIsCreateFolder\", false);\r\n      }\r\n    },\r\n\r\n    // 监听排序方式\r\n    \"$store.state.sortType\"(current) {\r\n      if (current == \"time\") {\r\n        this.listData.sort((a, b) => {\r\n          return Date.parse(a.gmtCreate) - Date.parse(b.gmtCreate);\r\n        });\r\n      } else if (current == \"size\") {\r\n        this.listData.sort((a, b) => {\r\n          return a.size - b.size;\r\n        });\r\n      }\r\n    },\r\n    searchFolder(current) {\r\n      this.currentChildrenFolder = current;\r\n    },\r\n  },\r\n  created() {},\r\n  mounted() {\r\n    // 获取组件的offset\r\n    let Card = document.querySelector(\".iconTypeListContainer\");\r\n    // console.log(Card);\r\n    this.cardoffsetTop = Card.offsetTop;\r\n    this.cardoffsetLeft = Card.offsetLeft;\r\n\r\n    // 监听页面窗口大小变化\r\n    window.addEventListener(\"resize\", (e) => {\r\n      // console.log(e);\r\n      this.pageWidth = document.body.clientWidth;\r\n      this.pageHeight = document.body.clientHeight;\r\n    });\r\n\r\n    // 监听所有点击事件\r\n    document.onclick = (e) => {\r\n      // console.log(e);\r\n      if (this.isMenuShow == true || this.isFolderMenuShow == true) {\r\n        this.isMenuShow = false;\r\n        this.isFolderMenuShow = false;\r\n        this.banScroll = false;\r\n      }\r\n      if (this.$store.state.isUserInfoCardMenuShow) {\r\n        this.$store.commit(\"updateIsUserInfoCardMenuShow\", false);\r\n      }\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.iconTypeListContainer {\r\n  height: calc(100vh - 100px);\r\n  width: calc(100vw - 240px);\r\n  overflow-y: scroll;\r\n  position: relative;\r\n}\r\n\r\n.tableTypeListContainer {\r\n  height: calc(100vh - 150px);\r\n}\r\n\r\n.banScroll {\r\n  overflow-y: hidden;\r\n}\r\n\r\n.IconTypeList {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  position: relative;\r\n  padding: 10px 20px 0;\r\n}\r\n\r\n.listItem {\r\n  margin: 0 5px 10px;\r\n  padding: 15px 5px 10px;\r\n  text-align: center;\r\n  width: 100px;\r\n  font-size: 14px;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  position: relative;\r\n  height: 118px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  /* box-sizing: border-box; */\r\n}\r\n\r\n.collectIcon {\r\n  position: absolute;\r\n  width: 15px;\r\n  height: 15px;\r\n  top: 0px;\r\n  right: 7px;\r\n}\r\n\r\n.folderItem:hover {\r\n  background-color: unset !important;\r\n}\r\n\r\n.name {\r\n  word-break: break-all;\r\n  text-overflow: ellipsis;\r\n  /* overflow: hidden; * 隐藏超出的内容 * */\r\n  white-space: nowrap;\r\n  padding-top: 10px;\r\n  width: 100px;\r\n  height: 18px;\r\n}\r\n\r\n.imgContainer {\r\n  height: 90px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n}\r\n\r\n.listItem img {\r\n  max-height: 90px;\r\n  max-width: 90%;\r\n  user-select: none;\r\n}\r\n\r\n.listItem:hover {\r\n  background-color: rgba(105, 107, 204, 0.2);\r\n}\r\n\r\n.listItem:hover i {\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.selectFile {\r\n  background-color: rgba(105, 107, 204, 0.4) !important;\r\n}\r\n\r\n.renameInput {\r\n  width: 92px;\r\n  position: absolute;\r\n  bottom: 10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n.videoContainer {\r\n  height: 90px;\r\n  width: 90px;\r\n  margin-bottom: 2px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #000;\r\n}\r\n\r\n.videoItem {\r\n  height: 90px;\r\n  width: 90px;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n}\r\n\r\n.iconContainer {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n.iconContainer i {\r\n  color: #fcfcfc;\r\n  font-size: 32px;\r\n  padding: 5px;\r\n  background-color: rgba(255, 255, 255, 0.3);\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  transition: all 0.1s;\r\n}\r\n\r\n.tableListItem {\r\n  display: flex;\r\n  /* background-color: pink; */\r\n  width: calc(100vw - 260px);\r\n  height: 55px;\r\n  padding: 6px 25px;\r\n  box-sizing: border-box;\r\n  /* align-items: center; */\r\n  border-bottom: 1px solid #eee;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  color: rgb(66, 66, 66);\r\n}\r\n\r\n.tableListItem > div {\r\n  height: 43px;\r\n  line-height: 43px;\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.tableListItem:hover {\r\n  background-color: #e1e1f5;\r\n}\r\n\r\n.tableImgContainer {\r\n  width: 48px;\r\n}\r\n\r\n.tableImgContainer img,\r\n.tableImgContainer .el-image {\r\n  height: 43px;\r\n  width: 43px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.tableVideoContainer {\r\n  height: 43px;\r\n  width: 43px;\r\n  background-color: black;\r\n  border-radius: 5px;\r\n}\r\n\r\n.tableVideoItem {\r\n  height: 43px;\r\n  width: 43px;\r\n}\r\n\r\n.tableName {\r\n  padding-left: 13px;\r\n  line-height: 43px;\r\n  width: 50%;\r\n}\r\n\r\n.tableItemSize {\r\n  width: 20%;\r\n  padding-left: 80px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.tableItemCreateTime {\r\n  padding-left: 60px;\r\n  box-sizing: border-box;\r\n  width: 25%;\r\n}\r\n\r\n.tableCollect {\r\n  width: 10%;\r\n  text-align: center;\r\n}\r\n\r\n.tableCollect img {\r\n  height: 15px;\r\n}\r\n\r\n.tableCreateInput {\r\n  margin-left: 15px;\r\n  height: 23px;\r\n}\r\n\r\n.tableRenameInput {\r\n  height: 23px;\r\n  margin-left: 10px;\r\n}\r\n\r\n.searchTips {\r\n  position: absolute;\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 22px;\r\n  color: rgb(63, 63, 63);\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}