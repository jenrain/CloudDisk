{"ast":null,"code":"const ChainedMap = require('./ChainedMap');\n\nconst ChainedSet = require('./ChainedSet');\n\nconst Resolve = require('./Resolve');\n\nconst ResolveLoader = require('./ResolveLoader');\n\nconst Output = require('./Output');\n\nconst DevServer = require('./DevServer');\n\nconst Plugin = require('./Plugin');\n\nconst Module = require('./Module');\n\nconst Optimization = require('./Optimization');\n\nconst Performance = require('./Performance');\n\nmodule.exports = class extends ChainedMap {\n  constructor() {\n    super();\n    this.devServer = new DevServer(this);\n    this.entryPoints = new ChainedMap(this);\n    this.module = new Module(this);\n    this.node = new ChainedMap(this);\n    this.optimization = new Optimization(this);\n    this.output = new Output(this);\n    this.performance = new Performance(this);\n    this.plugins = new ChainedMap(this);\n    this.resolve = new Resolve(this);\n    this.resolveLoader = new ResolveLoader(this);\n    this.extend(['amd', 'bail', 'cache', 'context', 'devtool', 'externals', 'loader', 'mode', 'name', 'parallelism', 'profile', 'recordsInputPath', 'recordsPath', 'recordsOutputPath', 'stats', 'target', 'watch', 'watchOptions']);\n  }\n\n  static toString(config, {\n    verbose = false,\n    configPrefix = 'config'\n  } = {}) {\n    // eslint-disable-next-line global-require\n    const {\n      stringify\n    } = require('javascript-stringify');\n\n    return stringify(config, (value, indent, stringify) => {\n      // improve plugin output\n      if (value && value.__pluginName) {\n        const prefix = `/* ${configPrefix}.${value.__pluginType}('${value.__pluginName}') */\\n`;\n        const constructorExpression = value.__pluginPath ? // The path is stringified to ensure special characters are escaped\n        // (such as the backslashes in Windows-style paths).\n        `(require(${stringify(value.__pluginPath)}))` : value.__pluginConstructorName;\n\n        if (constructorExpression) {\n          // get correct indentation for args by stringifying the args array and\n          // discarding the square brackets.\n          const args = stringify(value.__pluginArgs).slice(1, -1);\n          return `${prefix}new ${constructorExpression}(${args})`;\n        }\n\n        return prefix + stringify(value.__pluginArgs && value.__pluginArgs.length ? {\n          args: value.__pluginArgs\n        } : {});\n      } // improve rule/use output\n\n\n      if (value && value.__ruleNames) {\n        const ruleTypes = value.__ruleTypes;\n        const prefix = `/* ${configPrefix}.module${value.__ruleNames.map((r, index) => `.${ruleTypes ? ruleTypes[index] : 'rule'}('${r}')`).join('')}${value.__useName ? `.use('${value.__useName}')` : ``} */\\n`;\n        return prefix + stringify(value);\n      }\n\n      if (value && value.__expression) {\n        return value.__expression;\n      } // shorten long functions\n\n\n      if (typeof value === 'function') {\n        if (!verbose && value.toString().length > 100) {\n          return `function () { /* omitted long function */ }`;\n        }\n      }\n\n      return stringify(value);\n    }, 2);\n  }\n\n  entry(name) {\n    return this.entryPoints.getOrCompute(name, () => new ChainedSet(this));\n  }\n\n  plugin(name) {\n    return this.plugins.getOrCompute(name, () => new Plugin(this, name));\n  }\n\n  toConfig() {\n    const entryPoints = this.entryPoints.entries() || {};\n    return this.clean(Object.assign(this.entries() || {}, {\n      node: this.node.entries(),\n      output: this.output.entries(),\n      resolve: this.resolve.toConfig(),\n      resolveLoader: this.resolveLoader.toConfig(),\n      devServer: this.devServer.toConfig(),\n      module: this.module.toConfig(),\n      optimization: this.optimization.toConfig(),\n      plugins: this.plugins.values().map(plugin => plugin.toConfig()),\n      performance: this.performance.entries(),\n      entry: Object.keys(entryPoints).reduce((acc, key) => Object.assign(acc, {\n        [key]: entryPoints[key].values()\n      }), {})\n    }));\n  }\n\n  toString(options) {\n    return module.exports.toString(this.toConfig(), options);\n  }\n\n  merge(obj = {}, omit = []) {\n    const omissions = ['node', 'output', 'resolve', 'resolveLoader', 'devServer', 'optimization', 'performance', 'module'];\n\n    if (!omit.includes('entry') && 'entry' in obj) {\n      Object.keys(obj.entry).forEach(name => this.entry(name).merge([].concat(obj.entry[name])));\n    }\n\n    if (!omit.includes('plugin') && 'plugin' in obj) {\n      Object.keys(obj.plugin).forEach(name => this.plugin(name).merge(obj.plugin[name]));\n    }\n\n    omissions.forEach(key => {\n      if (!omit.includes(key) && key in obj) {\n        this[key].merge(obj[key]);\n      }\n    });\n    return super.merge(obj, [...omit, ...omissions, 'entry', 'plugin']);\n  }\n\n};","map":{"version":3,"names":["ChainedMap","require","ChainedSet","Resolve","ResolveLoader","Output","DevServer","Plugin","Module","Optimization","Performance","module","exports","constructor","devServer","entryPoints","node","optimization","output","performance","plugins","resolve","resolveLoader","extend","toString","config","verbose","configPrefix","stringify","value","indent","__pluginName","prefix","__pluginType","constructorExpression","__pluginPath","__pluginConstructorName","args","__pluginArgs","slice","length","__ruleNames","ruleTypes","__ruleTypes","map","r","index","join","__useName","__expression","entry","name","getOrCompute","plugin","toConfig","entries","clean","Object","assign","values","keys","reduce","acc","key","options","merge","obj","omit","omissions","includes","forEach","concat"],"sources":["D:/Desktop/cloud-disk-front/node_modules/webpack-chain/src/Config.js"],"sourcesContent":["const ChainedMap = require('./ChainedMap');\nconst ChainedSet = require('./ChainedSet');\nconst Resolve = require('./Resolve');\nconst ResolveLoader = require('./ResolveLoader');\nconst Output = require('./Output');\nconst DevServer = require('./DevServer');\nconst Plugin = require('./Plugin');\nconst Module = require('./Module');\nconst Optimization = require('./Optimization');\nconst Performance = require('./Performance');\n\nmodule.exports = class extends ChainedMap {\n  constructor() {\n    super();\n    this.devServer = new DevServer(this);\n    this.entryPoints = new ChainedMap(this);\n    this.module = new Module(this);\n    this.node = new ChainedMap(this);\n    this.optimization = new Optimization(this);\n    this.output = new Output(this);\n    this.performance = new Performance(this);\n    this.plugins = new ChainedMap(this);\n    this.resolve = new Resolve(this);\n    this.resolveLoader = new ResolveLoader(this);\n    this.extend([\n      'amd',\n      'bail',\n      'cache',\n      'context',\n      'devtool',\n      'externals',\n      'loader',\n      'mode',\n      'name',\n      'parallelism',\n      'profile',\n      'recordsInputPath',\n      'recordsPath',\n      'recordsOutputPath',\n      'stats',\n      'target',\n      'watch',\n      'watchOptions',\n    ]);\n  }\n\n  static toString(config, { verbose = false, configPrefix = 'config' } = {}) {\n    // eslint-disable-next-line global-require\n    const { stringify } = require('javascript-stringify');\n\n    return stringify(\n      config,\n      (value, indent, stringify) => {\n        // improve plugin output\n        if (value && value.__pluginName) {\n          const prefix = `/* ${configPrefix}.${value.__pluginType}('${value.__pluginName}') */\\n`;\n          const constructorExpression = value.__pluginPath\n            ? // The path is stringified to ensure special characters are escaped\n              // (such as the backslashes in Windows-style paths).\n              `(require(${stringify(value.__pluginPath)}))`\n            : value.__pluginConstructorName;\n\n          if (constructorExpression) {\n            // get correct indentation for args by stringifying the args array and\n            // discarding the square brackets.\n            const args = stringify(value.__pluginArgs).slice(1, -1);\n            return `${prefix}new ${constructorExpression}(${args})`;\n          }\n          return (\n            prefix +\n            stringify(\n              value.__pluginArgs && value.__pluginArgs.length\n                ? { args: value.__pluginArgs }\n                : {},\n            )\n          );\n        }\n\n        // improve rule/use output\n        if (value && value.__ruleNames) {\n          const ruleTypes = value.__ruleTypes;\n          const prefix = `/* ${configPrefix}.module${value.__ruleNames\n            .map(\n              (r, index) => `.${ruleTypes ? ruleTypes[index] : 'rule'}('${r}')`,\n            )\n            .join('')}${\n            value.__useName ? `.use('${value.__useName}')` : ``\n          } */\\n`;\n          return prefix + stringify(value);\n        }\n\n        if (value && value.__expression) {\n          return value.__expression;\n        }\n\n        // shorten long functions\n        if (typeof value === 'function') {\n          if (!verbose && value.toString().length > 100) {\n            return `function () { /* omitted long function */ }`;\n          }\n        }\n\n        return stringify(value);\n      },\n      2,\n    );\n  }\n\n  entry(name) {\n    return this.entryPoints.getOrCompute(name, () => new ChainedSet(this));\n  }\n\n  plugin(name) {\n    return this.plugins.getOrCompute(name, () => new Plugin(this, name));\n  }\n\n  toConfig() {\n    const entryPoints = this.entryPoints.entries() || {};\n\n    return this.clean(\n      Object.assign(this.entries() || {}, {\n        node: this.node.entries(),\n        output: this.output.entries(),\n        resolve: this.resolve.toConfig(),\n        resolveLoader: this.resolveLoader.toConfig(),\n        devServer: this.devServer.toConfig(),\n        module: this.module.toConfig(),\n        optimization: this.optimization.toConfig(),\n        plugins: this.plugins.values().map((plugin) => plugin.toConfig()),\n        performance: this.performance.entries(),\n        entry: Object.keys(entryPoints).reduce(\n          (acc, key) =>\n            Object.assign(acc, { [key]: entryPoints[key].values() }),\n          {},\n        ),\n      }),\n    );\n  }\n\n  toString(options) {\n    return module.exports.toString(this.toConfig(), options);\n  }\n\n  merge(obj = {}, omit = []) {\n    const omissions = [\n      'node',\n      'output',\n      'resolve',\n      'resolveLoader',\n      'devServer',\n      'optimization',\n      'performance',\n      'module',\n    ];\n\n    if (!omit.includes('entry') && 'entry' in obj) {\n      Object.keys(obj.entry).forEach((name) =>\n        this.entry(name).merge([].concat(obj.entry[name])),\n      );\n    }\n\n    if (!omit.includes('plugin') && 'plugin' in obj) {\n      Object.keys(obj.plugin).forEach((name) =>\n        this.plugin(name).merge(obj.plugin[name]),\n      );\n    }\n\n    omissions.forEach((key) => {\n      if (!omit.includes(key) && key in obj) {\n        this[key].merge(obj[key]);\n      }\n    });\n\n    return super.merge(obj, [...omit, ...omissions, 'entry', 'plugin']);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}