{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringifyPath = exports.quoteKey = exports.isValidVariableName = exports.IS_VALID_IDENTIFIER = exports.quoteString = void 0;\n/**\n * Match all characters that need to be escaped in a string. Modified from\n * source to match single quotes instead of double.\n *\n * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n */\n\nconst ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n/**\n * Map of characters to escape characters.\n */\n\nconst META_CHARS = new Map([[\"\\b\", \"\\\\b\"], [\"\\t\", \"\\\\t\"], [\"\\n\", \"\\\\n\"], [\"\\f\", \"\\\\f\"], [\"\\r\", \"\\\\r\"], [\"'\", \"\\\\'\"], ['\"', '\\\\\"'], [\"\\\\\", \"\\\\\\\\\"]]);\n/**\n * Escape any character into its literal JavaScript string.\n *\n * @param  {string} char\n * @return {string}\n */\n\nfunction escapeChar(char) {\n  return META_CHARS.get(char) || `\\\\u${`0000${char.charCodeAt(0).toString(16)}`.slice(-4)}`;\n}\n/**\n * Quote a string.\n */\n\n\nfunction quoteString(str) {\n  return `'${str.replace(ESCAPABLE, escapeChar)}'`;\n}\n\nexports.quoteString = quoteString;\n/**\n * JavaScript reserved keywords.\n */\n\nconst RESERVED_WORDS = new Set((\"break else new var case finally return void catch for switch while \" + \"continue function this with default if throw delete in try \" + \"do instanceof typeof abstract enum int short boolean export \" + \"interface static byte extends long super char final native synchronized \" + \"class float package throws const goto private transient debugger \" + \"implements protected volatile double import public let yield\").split(\" \"));\n/**\n * Test for valid JavaScript identifier.\n */\n\nexports.IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n/**\n * Check if a variable name is valid.\n */\n\nfunction isValidVariableName(name) {\n  return typeof name === \"string\" && !RESERVED_WORDS.has(name) && exports.IS_VALID_IDENTIFIER.test(name);\n}\n\nexports.isValidVariableName = isValidVariableName;\n/**\n * Quote JavaScript key access.\n */\n\nfunction quoteKey(key, next) {\n  return isValidVariableName(key) ? key : next(key);\n}\n\nexports.quoteKey = quoteKey;\n/**\n * Serialize the path to a string.\n */\n\nfunction stringifyPath(path, next) {\n  let result = \"\";\n\n  for (const key of path) {\n    if (isValidVariableName(key)) {\n      result += `.${key}`;\n    } else {\n      result += `[${next(key)}]`;\n    }\n  }\n\n  return result;\n}\n\nexports.stringifyPath = stringifyPath;","map":{"version":3,"mappings":";;;;;;AAEA;;;;;;;AAMA,MAAMA,SAAS,GAAG,0HAAlB;AAEA;;;;AAGA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAwB,CACzC,CAAC,IAAD,EAAO,KAAP,CADyC,EAEzC,CAAC,IAAD,EAAO,KAAP,CAFyC,EAGzC,CAAC,IAAD,EAAO,KAAP,CAHyC,EAIzC,CAAC,IAAD,EAAO,KAAP,CAJyC,EAKzC,CAAC,IAAD,EAAO,KAAP,CALyC,EAMzC,CAAC,GAAD,EAAM,KAAN,CANyC,EAOzC,CAAC,GAAD,EAAM,KAAN,CAPyC,EAQzC,CAAC,IAAD,EAAO,MAAP,CARyC,CAAxB,CAAnB;AAWA;;;;;;;AAMA,SAASC,UAAT,CAAoBC,IAApB,EAAgC;EAC9B,OACEH,UAAU,CAACI,GAAX,CAAeD,IAAf,KACA,MAAM,OAAOA,IAAI,CAACE,UAAL,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4B,EAA5B,CAA+B,EAAtC,CAAyCC,KAAzC,CAA+C,CAAC,CAAhD,CAAkD,EAF1D;AAID;AAED;;;;;AAGA,SAAgBC,WAAhB,CAA4BC,GAA5B,EAAuC;EACrC,OAAO,IAAIA,GAAG,CAACC,OAAJ,CAAYX,SAAZ,EAAuBG,UAAvB,CAAkC,GAA7C;AACD;;AAFDS;AAIA;;;;AAGA,MAAMC,cAAc,GAAG,IAAIC,GAAJ,CACrB,CACE,wEACA,6DADA,GAEA,8DAFA,GAGA,0EAHA,GAIA,mEAJA,GAKA,8DANF,EAOEC,KAPF,CAOQ,GAPR,CADqB,CAAvB;AAWA;;;;AAGaH,8BAAsB,4BAAtB;AAEb;;;;AAGA,SAAgBI,mBAAhB,CAAoCC,IAApC,EAAqD;EACnD,OACE,OAAOA,IAAP,KAAgB,QAAhB,IACA,CAACJ,cAAc,CAACK,GAAf,CAAmBD,IAAnB,CADD,IAEAL,4BAAoBO,IAApB,CAAyBF,IAAzB,CAHF;AAKD;;AANDL;AAQA;;;;AAGA,SAAgBQ,QAAhB,CAAyBC,GAAzB,EAA2CC,IAA3C,EAAqD;EACnD,OAAON,mBAAmB,CAACK,GAAD,CAAnB,GAA2BA,GAA3B,GAAiCC,IAAI,CAACD,GAAD,CAA5C;AACD;;AAFDT;AAIA;;;;AAGA,SAAgBW,aAAhB,CAA8BC,IAA9B,EAAmDF,IAAnD,EAA6D;EAC3D,IAAIG,MAAM,GAAG,EAAb;;EAEA,KAAK,MAAMJ,GAAX,IAAkBG,IAAlB,EAAwB;IACtB,IAAIR,mBAAmB,CAACK,GAAD,CAAvB,EAA8B;MAC5BI,MAAM,IAAI,IAAIJ,GAAG,EAAjB;IACD,CAFD,MAEO;MACLI,MAAM,IAAI,IAAIH,IAAI,CAACD,GAAD,CAAK,GAAvB;IACD;EACF;;EAED,OAAOI,MAAP;AACD;;AAZDb","names":["ESCAPABLE","META_CHARS","Map","escapeChar","char","get","charCodeAt","toString","slice","quoteString","str","replace","exports","RESERVED_WORDS","Set","split","isValidVariableName","name","has","test","quoteKey","key","next","stringifyPath","path","result"],"sourceRoot":"","sources":["../src/quote.ts"],"sourcesContent":["import { Next } from \"./types\";\n\n/**\n * Match all characters that need to be escaped in a string. Modified from\n * source to match single quotes instead of double.\n *\n * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n */\nconst ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n/**\n * Map of characters to escape characters.\n */\nconst META_CHARS = new Map<string, string>([\n  [\"\\b\", \"\\\\b\"],\n  [\"\\t\", \"\\\\t\"],\n  [\"\\n\", \"\\\\n\"],\n  [\"\\f\", \"\\\\f\"],\n  [\"\\r\", \"\\\\r\"],\n  [\"'\", \"\\\\'\"],\n  ['\"', '\\\\\"'],\n  [\"\\\\\", \"\\\\\\\\\"],\n]);\n\n/**\n * Escape any character into its literal JavaScript string.\n *\n * @param  {string} char\n * @return {string}\n */\nfunction escapeChar(char: string) {\n  return (\n    META_CHARS.get(char) ||\n    `\\\\u${`0000${char.charCodeAt(0).toString(16)}`.slice(-4)}`\n  );\n}\n\n/**\n * Quote a string.\n */\nexport function quoteString(str: string) {\n  return `'${str.replace(ESCAPABLE, escapeChar)}'`;\n}\n\n/**\n * JavaScript reserved keywords.\n */\nconst RESERVED_WORDS = new Set(\n  (\n    \"break else new var case finally return void catch for switch while \" +\n    \"continue function this with default if throw delete in try \" +\n    \"do instanceof typeof abstract enum int short boolean export \" +\n    \"interface static byte extends long super char final native synchronized \" +\n    \"class float package throws const goto private transient debugger \" +\n    \"implements protected volatile double import public let yield\"\n  ).split(\" \")\n);\n\n/**\n * Test for valid JavaScript identifier.\n */\nexport const IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n\n/**\n * Check if a variable name is valid.\n */\nexport function isValidVariableName(name: PropertyKey): name is string {\n  return (\n    typeof name === \"string\" &&\n    !RESERVED_WORDS.has(name) &&\n    IS_VALID_IDENTIFIER.test(name)\n  );\n}\n\n/**\n * Quote JavaScript key access.\n */\nexport function quoteKey(key: PropertyKey, next: Next) {\n  return isValidVariableName(key) ? key : next(key);\n}\n\n/**\n * Serialize the path to a string.\n */\nexport function stringifyPath(path: PropertyKey[], next: Next) {\n  let result = \"\";\n\n  for (const key of path) {\n    if (isValidVariableName(key)) {\n      result += `.${key}`;\n    } else {\n      result += `[${next(key)}]`;\n    }\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}