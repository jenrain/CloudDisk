{"ast":null,"code":"var bind = require('../internals/function-bind-context');\n\nvar IndexedObject = require('../internals/indexed-object');\n\nvar toObject = require('../internals/to-object');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like'); // `Array.prototype.{ findLast, findLastIndex }` methods implementation\n\n\nvar createMethod = function (TYPE) {\n  var IS_FIND_LAST_INDEX = TYPE == 1;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that);\n    var index = lengthOfArrayLike(self);\n    var value, result;\n\n    while (index-- > 0) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (result) switch (TYPE) {\n        case 0:\n          return value;\n        // findLast\n\n        case 1:\n          return index;\n        // findLastIndex\n      }\n    }\n\n    return IS_FIND_LAST_INDEX ? -1 : undefined;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.findLast` method\n  // https://github.com/tc39/proposal-array-find-from-last\n  findLast: createMethod(0),\n  // `Array.prototype.findLastIndex` method\n  // https://github.com/tc39/proposal-array-find-from-last\n  findLastIndex: createMethod(1)\n};","map":{"version":3,"names":["bind","require","IndexedObject","toObject","lengthOfArrayLike","createMethod","TYPE","IS_FIND_LAST_INDEX","$this","callbackfn","that","O","self","boundFunction","index","value","result","undefined","module","exports","findLast","findLastIndex"],"sources":["D:/1Project/GoProject/CloudDisk/CloudDiskFront/node_modules/_core-js@3.25.3@core-js/internals/array-iteration-from-last.js"],"sourcesContent":["var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ findLast, findLastIndex }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_FIND_LAST_INDEX = TYPE == 1;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that);\n    var index = lengthOfArrayLike(self);\n    var value, result;\n    while (index-- > 0) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (result) switch (TYPE) {\n        case 0: return value; // findLast\n        case 1: return index; // findLastIndex\n      }\n    }\n    return IS_FIND_LAST_INDEX ? -1 : undefined;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.findLast` method\n  // https://github.com/tc39/proposal-array-find-from-last\n  findLast: createMethod(0),\n  // `Array.prototype.findLastIndex` method\n  // https://github.com/tc39/proposal-array-find-from-last\n  findLastIndex: createMethod(1)\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAAD,CAA3B;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,mCAAD,CAA/B,C,CAEA;;;AACA,IAAII,YAAY,GAAG,UAAUC,IAAV,EAAgB;EACjC,IAAIC,kBAAkB,GAAGD,IAAI,IAAI,CAAjC;EACA,OAAO,UAAUE,KAAV,EAAiBC,UAAjB,EAA6BC,IAA7B,EAAmC;IACxC,IAAIC,CAAC,GAAGR,QAAQ,CAACK,KAAD,CAAhB;IACA,IAAII,IAAI,GAAGV,aAAa,CAACS,CAAD,CAAxB;IACA,IAAIE,aAAa,GAAGb,IAAI,CAACS,UAAD,EAAaC,IAAb,CAAxB;IACA,IAAII,KAAK,GAAGV,iBAAiB,CAACQ,IAAD,CAA7B;IACA,IAAIG,KAAJ,EAAWC,MAAX;;IACA,OAAOF,KAAK,KAAK,CAAjB,EAAoB;MAClBC,KAAK,GAAGH,IAAI,CAACE,KAAD,CAAZ;MACAE,MAAM,GAAGH,aAAa,CAACE,KAAD,EAAQD,KAAR,EAAeH,CAAf,CAAtB;MACA,IAAIK,MAAJ,EAAY,QAAQV,IAAR;QACV,KAAK,CAAL;UAAQ,OAAOS,KAAP;QAAc;;QACtB,KAAK,CAAL;UAAQ,OAAOD,KAAP;QAAc;MAFZ;IAIb;;IACD,OAAOP,kBAAkB,GAAG,CAAC,CAAJ,GAAQU,SAAjC;EACD,CAfD;AAgBD,CAlBD;;AAoBAC,MAAM,CAACC,OAAP,GAAiB;EACf;EACA;EACAC,QAAQ,EAAEf,YAAY,CAAC,CAAD,CAHP;EAIf;EACA;EACAgB,aAAa,EAAEhB,YAAY,CAAC,CAAD;AANZ,CAAjB"},"metadata":{},"sourceType":"script"}